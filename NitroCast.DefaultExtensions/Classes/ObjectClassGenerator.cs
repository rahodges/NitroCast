using System;
using System.Data;
using NitroCast.Core;
using NitroCast.Core.Extensions;

namespace NitroCast.CodeGenerators
{
	/// <summary>
	/// Summary description for ObjectClassGenerator.
	/// </summary>
	[ExtensionAttribute("Default Object Class",
		 "Roy A.E. Hodges",
		 "Copyright © 2003 Roy A.E. Hodges. All Rights Reserved.",
		 "{0}.cs",
		 "Default class generator for the object being designed. The default manager class is required in the assembly. " + 
		 "It is recommended to include the default collection class as well.",
		 "\\Default\\Object Class")]
	public class ObjectClassGenerator : OutputExtension
	{		
		public override string Render()
		{
			CodeWriter output = new CodeWriter();
			output.CurrentClass = _modelClass;

            output.WriteLine("/* ********************************************************** *");
            output.WriteLine(" * AMNS NitroCast v1.0 Class Object Business Tier               *");
            output.WriteLine(" * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *");
            output.WriteLine(" * All Rights Reserved                                        *");
            output.WriteLine(" * ---------------------------------------------------------- *");
            output.WriteLine(" * Source code may not be reproduced or redistributed without *");
            output.WriteLine(" * written expressed permission from the author.              *");
            output.WriteLine(" * Permission is granted to modify source code by licencee.   *");
            output.WriteLine(" * These permissions do not extend to third parties.          *");
            output.WriteLine(" * ********************************************************** */");
            output.WriteLine();

			output.WriteLine("using System;");

            #region Namespace Export

            int importCount = -1;
			bool addImport = true;
			string[] namespacelist = new string[20];
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				addImport = true;

				foreach(string name in namespacelist)
					if(c.ReferenceType.NameSpace == name | c.ReferenceType.NameSpace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = c.ReferenceType.NameSpace;										
				}
			}
            foreach (EnumField e in _modelClass.EnumFields)
            {
                addImport = true;

                foreach(string name in namespacelist)
                    if (e.EnumType.NameSpace == name | e.EnumType.NameSpace == _modelClass.Namespace)
                    {
                        addImport = false;
                        break;
                    }

                if (addImport)
                {
                    importCount++;
                    namespacelist[importCount] = e.EnumType.NameSpace;
                }
            }

			for(int x = 0; x <= importCount; x++)
				output.WriteLine("using {0};", namespacelist[x]);

			output.WriteLine();
			output.WriteLine("namespace {0}", _modelClass.Namespace);
			output.WriteLine("{");

            #endregion

            output.Indent++;
			output.WriteXmlSummary(_modelClass.Summary);
			if(_modelClass.Interfaces == string.Empty)
				output.WriteLine("public class {0} : ICloneable, IComparable", _modelClass.Name);
			else
				output.WriteLine("public class {0} : ICloneable, IComparable, {1}", _modelClass.Name, _modelClass.Interfaces);
			output.WriteLine("{");
			output.Indent++;

			#region Fields

			output.WriteLine("#region Private Fields");
			output.WriteLine();

			output.WriteLine("internal int iD = 0;");
			output.WriteLine("internal bool isPlaceHolder;\t\t// Placeholders only store an ID; marked as unsynced.");
			output.WriteLine("internal bool isSynced;\t\t\t\t// Shows that data is synced with database.");

//			//
//			// Output locking fields
//			//
//			if(___classObject.LockType == DbLockType.Pessimistic |
//				___classObject.LockType == DbLockType.PessimisticTimeStamp)
//			{
//				output.WriteLine("private bool dbLockEnabled;");
//				output.WriteLine("private GreyFoxUser dbLockUser;");
//			}
//
//			if(___classObject.LockType == DbLockType.PessimisticTimeStamp)
//				output.WriteLine("private DateTime dbLockTimeStamp;");

			//
			// Output table name
			//
			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("internal string tableName;");
				
			}

			ValueField fieldEntry;
			ReferenceField childEntry;
            EnumField enumField;

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				if(folder.IsPartition)
				{
					output.WriteLine("internal bool is{0}Synced;", folder.ProgramName);
				}

				foreach(object i in folder.Items)
				{
					if(i is ValueField)
					{
						fieldEntry = (ValueField) i;
						output.WriteLine("internal {0} {1};", 
							fieldEntry.ValueType.ProgramType, 
							fieldEntry.PrivateName);                        
					}
					else if(i is ReferenceField)
					{
						childEntry = (ReferenceField) i;

                        if (childEntry.IsArray)
                        {
                            output.WriteLine("internal {0}[] {1};",
                                childEntry.ReferenceType.Name,
                                childEntry.PrivateName);
                        }
                        else if (childEntry.IsCollection)
                        {
                            output.WriteLine("internal {0}Collection {1};",
                                childEntry.ReferenceType.Name,
                                childEntry.PrivateName);
                        }
                        else
                        {
                            output.WriteLine("internal {0} {1};",
                                childEntry.ReferenceType.Name,
                                childEntry.PrivateName);
                        }
					}
                    else if (i is EnumField)
                    {
                        enumField = (EnumField)i;

                        output.WriteLine("internal {0} {1};",
                            enumField.EnumType.Name,
                            enumField.PrivateName);
                    }
				}
			}

			output.WriteLine();
			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Base Properties

			//
			// Write properties
			//
			output.WriteRegionBegin("Public Properties");
			
			output.WriteLine("/// <summary>");
			output.WriteLine("/// {0} Record ID, assigned by database. Readonly.", _modelClass.Name);
			output.WriteLine("/// </summary>");
			output.WriteLine("public int ID");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return iD;");
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Identifies the {0} as a Placeholder. Placeholders only contain ", _modelClass.Name);
			output.WriteLine("/// a {0} ID. Record late-binds data when it is accessed.", _modelClass.Name);
			output.WriteLine("/// </summary>");
			output.WriteLine("public bool IsPlaceHolder");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return isPlaceHolder;");
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

            output.WriteLine("/// <summary>");
            output.WriteLine("/// True if the object is synced with the database.");
            output.WriteLine("/// </summary>");
            output.WriteLine("public bool IsSynced");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("get");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("return isSynced;");
            output.Indent--;
            output.WriteLine("}");            
            output.WriteLine("set");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("if(value == true)");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("throw (new Exception(\"Cannot set IsSynced to true.\"));");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("isSynced = value;");
            output.Indent--;
            output.WriteLine("}");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("/// <summary>");
				output.WriteLine("/// Identifies the table the {0} belongs to. Readonly. ", _modelClass.Name);
				output.WriteLine("/// Use Replicate to replicate the object into a different table.", _modelClass.Name);
				output.WriteLine("/// </summary>");
				output.WriteLine("public string TableName");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("get");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("return tableName;");
				output.Indent--;
				output.WriteLine("}");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}

//			if(___classObject.LockType == DbLockType.Pessimistic | 
//				___classObject.LockType == DbLockType.PessimisticTimeStamp)
//			{
//				output.WriteLine("/// <summary>");
//				output.WriteLine("///  ");
//				output.WriteLine("/// </summary>");
//				output.WriteLine("public string DbLockEnabled");
//				output.WriteLine("{");
//				output.Indent++;
//				output.WriteLine("get");
//				output.WriteLine("{");
//				output.Indent++;
//				output.WriteLine("return dbLockEnabled;");
//				output.Indent--;
//				output.WriteLine("}");
//				output.Indent--;
//				output.WriteLine("}");
//				output.WriteLine();
//
//				output.WriteLine("/// <summary>");
//				output.WriteLine("///  ");
//				output.WriteLine("/// </summary>");
//				output.WriteLine("public string DbLockUser");
//				output.WriteLine("{");
//				output.Indent++;
//				output.WriteLine("get");
//				output.WriteLine("{");
//				output.Indent++;
//				output.WriteLine("return dbLockUser;");
//				output.Indent--;
//				output.WriteLine("}");
//				output.Indent--;
//				output.WriteLine("}");
//				output.WriteLine();
//			}
//
//			if(___classObject.LockType == DbLockType.PessimisticTimeStamp)
//			{
//				output.WriteLine("/// <summary>");
//				output.WriteLine("///  ");
//				output.WriteLine("/// </summary>");
//				output.WriteLine("public string DbLockTimeStamp");
//				output.WriteLine("{");
//				output.Indent++;
//				output.WriteLine("get");
//				output.WriteLine("{");
//				output.Indent++;
//				output.WriteLine("return dbLockTimeStamp;");
//				output.Indent--;
//				output.WriteLine("}");
//				output.Indent--;
//				output.WriteLine("}");
//				output.WriteLine();
//			}
//
			foreach(ClassFolder folder in _modelClass.Folders)
			{
				foreach(object i in folder.Items)
				{
					if(i is ValueField)
					{
						fieldEntry = (ValueField) i;

						if(fieldEntry.Name != string.Empty)
						{
							output.WriteXmlSummary(fieldEntry.Description);
							output.WriteLine("public {0} {1}", 
								fieldEntry.ValueType.ProgramType, fieldEntry.Name);
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("get");
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("EnsurePreLoad();");
					
							// Start of lock statement
							if(_modelClass.IsThreadSafe)
							{
								output.WriteLine("lock(this)");
								output.WriteLine("{");
								output.Indent++;
							}

							output.WriteLine("return {0};", 
								fieldEntry.PrivateName);
					
							// End of lock statement
							if(_modelClass.IsThreadSafe)
							{
								output.Indent--;
								output.WriteLine("}");
							}

							output.Indent--;
							output.WriteLine("}");

							if(!fieldEntry.ValueType.IsClass)
							{
								output.WriteLine("set");
								output.WriteLine("{");
								output.Indent++;
								output.WriteLine("EnsurePreLoad();");
								if(_modelClass.IsThreadSafe)
								{
									output.WriteLine("lock(this)");
									output.WriteLine("{");
									output.Indent++;
								}
								output.WriteLine("isSynced &= {0} == value;", 
									fieldEntry.PrivateName);
								output.WriteLine("{0} = value;", 
									fieldEntry.PrivateName);
								if(_modelClass.IsThreadSafe)
								{
									output.Indent--;
									output.WriteLine("}");
								}
								output.Indent--;
								output.WriteLine("}");
							}

							output.Indent--;
							output.WriteLine("}");
							output.WriteLine();
						}
					}
					else if(i is ReferenceField)
					{
						childEntry = (ReferenceField) i;

						output.WriteXmlSummary(childEntry.Description);

						if(childEntry.IsArray)
							output.WriteLine("public {0}[] {1}", 
								childEntry.ReferenceType.Name, childEntry.Name);
						else if(childEntry.IsCollection)
							output.WriteLine("public {0}Collection {1}", 
								childEntry.ReferenceType.Name, childEntry.Name);
						else
							output.WriteLine("public {0} {1}", 
								childEntry.ReferenceType.Name, childEntry.Name);

						output.WriteLine("{");
						output.Indent++;
						output.WriteLine("get");
						output.WriteLine("{");
						output.Indent++;

						// Start of lock statement
						if(_modelClass.IsThreadSafe)
						{
							output.WriteLine("lock(this)");
							output.WriteLine("{");
							output.Indent++;
						}

						output.WriteLine("EnsurePreLoad();");

						if (childEntry.HasChildrenTables)
						{
							output.WriteLine("if({0} == null)", childEntry.PrivateName);
							output.WriteLine("{");
							output.Indent++;
							if (childEntry.ReferenceType.IsTableCoded | childEntry.IsTableCoded)
								output.WriteLine("{0}Manager.Fill{1}(this);", 
									_modelClass.Name, childEntry.Name);
							else if (childEntry.TableName != string.Empty)
								output.WriteLine("{0}Manager.Fill{1}(this, \"{2}\");", 
									_modelClass.Name, childEntry.Name, childEntry.TableName);
							else
								output.WriteLine("{0}Manager.Fill{1}(this, {2}Table);", 
									_modelClass.Name, childEntry.Name, childEntry.PrivateName);
							if (childEntry.IsCollection)
								output.WriteLine("{0}.CollectionChanged += " +
									"new System.EventHandler(childrenCollection_Changed);",
									childEntry.PrivateName);
							output.Indent--;
							output.WriteLine("}");
						}
				
						output.WriteLine("return {0};", childEntry.PrivateName);					
				
						// End of lock statement
						if(_modelClass.IsThreadSafe)
						{
							output.Indent--;
							output.WriteLine("}");
						}

						output.Indent--;
						output.WriteLine("}");
				

						output.WriteLine("set");
						output.WriteLine("{");
						output.Indent++;

						// Start of lock statement
						if(_modelClass.IsThreadSafe)
						{
							output.WriteLine("lock(this)");
							output.WriteLine("{");
							output.Indent++;
						}

						if(!childEntry.HasChildrenTables)
						{
							output.WriteLine("EnsurePreLoad();");

							output.WriteLine("if(value == null)");
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("if({0} == null)", childEntry.PrivateName);
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("return;", childEntry.PrivateName);
							output.Indent--;
							output.WriteLine("}");
							output.WriteLine("else");
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("{0} = value;", childEntry.PrivateName);
							output.WriteLine("isSynced = false;");
							output.Indent--;
							output.WriteLine("}");
							output.Indent--;
							output.WriteLine("}");
							output.WriteLine("else");
							output.WriteLine("{");
							output.Indent++;

							if (childEntry.IsTableCoded & 
								!childEntry.ReferenceType.ParentClassEntry.IsTableCoded)
							{
								output.WriteLine("if(value.TableName != \"{0}\") " +
									"throw(new Exception(\"Cannot set {1}. Table names mismatched.\"));", 
									childEntry.TableName, childEntry.Name);
							}

							output.WriteLine("if({0} != null && value.ID == {0}.ID)", 
								childEntry.PrivateName);
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("return; ");
							output.Indent--;
							output.WriteLine("}");
							output.WriteLine("else");
							output.WriteLine("{");
							output.Indent++;
							output.WriteLine("{0} = value;", childEntry.PrivateName);
							output.WriteLine("isSynced = false;");
							output.Indent--;
							output.WriteLine("}");
							output.Indent--;
							output.WriteLine("}");
						}

						// Output CollectionChanged handlers
						if(childEntry.IsCollection)
						{
							output.WriteLine("EnsurePreLoad();");

							// If the collection is null then a collection is added, desync the object and
							// be sure to subscribe to the collection changed event.
							output.WriteLine("if(!object.Equals({0}, value))", childEntry.PrivateName);
							output.WriteLine("{");
							output.Indent++;
                            
                            output.WriteLine("if(value == null)");
                            output.Indent++;
                            output.WriteLine("{0} = new {1}Collection();", childEntry.Name, 
                                childEntry.ReferenceType.Name);
                            output.Indent--;
                            output.WriteLine("else");
                            output.Indent++;
							output.WriteLine("{0} = value;", childEntry.PrivateName);
                            output.Indent--;

							output.WriteLine("{0}.CollectionChanged += " +
								"new System.EventHandler(childrenCollection_Changed);",
								childEntry.PrivateName);
							output.WriteLine("isSynced = false;");
							output.Indent--;
							output.WriteLine("}");					
						}

						// End of lock statement
						if(_modelClass.IsThreadSafe)
						{
							output.Indent--;
							output.WriteLine("}");
						}
				
						// End of set method
						output.Indent--;
						output.WriteLine("}");
                
						// End of child property
						output.Indent--;
						output.WriteLine("}");
						output.WriteLine();
					}
                    else if (i is EnumField)
                    {
                        enumField = (EnumField)i;

                        if (enumField.Name != string.Empty)
                        {
                            output.WriteXmlSummary(enumField.Description);
                            output.WriteLine("public {0} {1}",
                                enumField.EnumType.Name, enumField.Name);
                            output.WriteLine("{");
                            output.Indent++;
                            output.WriteLine("get");
                            output.WriteLine("{");
                            output.Indent++;
                            output.WriteLine("EnsurePreLoad();");

                            // Start of lock statement
                            if (_modelClass.IsThreadSafe)
                            {
                                output.WriteLine("lock(this)");
                                output.WriteLine("{");
                                output.Indent++;
                            }

                            output.WriteLine("return {0};",
                                enumField.PrivateName);

                            // End of lock statement
                            if (_modelClass.IsThreadSafe)
                            {
                                output.Indent--;
                                output.WriteLine("}");
                            }

                            output.Indent--;
                            output.WriteLine("}");

                                output.WriteLine("set");
                                output.WriteLine("{");
                                output.Indent++;
                                output.WriteLine("EnsurePreLoad();");
                                if (_modelClass.IsThreadSafe)
                                {
                                    output.WriteLine("lock(this)");
                                    output.WriteLine("{");
                                    output.Indent++;
                                }
                                output.WriteLine("isSynced &= {0} == value;",
                                    enumField.PrivateName);
                                output.WriteLine("{0} = value;",
                                    enumField.PrivateName);
                                if (_modelClass.IsThreadSafe)
                                {
                                    output.Indent--;
                                    output.WriteLine("}");
                                }
                                output.Indent--;
                                output.WriteLine("}");

                            output.Indent--;
                            output.WriteLine("}");
                            output.WriteLine();
                        }
                    }
				}
			}

			output.WriteRegionEnd();

			#endregion

			// Write constructors
			output.WriteRegionBegin("Constructors");

			#region Constructors

			if(_modelClass.IsTableCoded)
			{
				output.WriteXmlSummary("Instantiates a new instance of {0}.", _modelClass.Name);
				output.WriteLine("public {0}()", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;

                foreach (ClassFolder folder in _modelClass.Folders)
                {
                    foreach (object item in folder.Items)
                    {
                        if (item is ValueField)
                        {
                            ValueField f = (ValueField)item;

                            if (f.DefaultValue != string.Empty)
                            {
                                if (f.DefaultValue != string.Empty | f.DefaultValue != "")
                                    output.WriteLine("{0} = {1};", f.PrivateName, f.DefaultValue);
                                else if (f.ValueType.DefaultValue != string.Empty)
                                    output.WriteLine("{0} = {1};", f.PrivateName, f.ValueType.DefaultValue);
                            }
                        }
                    }
                }
					
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();

				output.WriteLine("public {0}(int id)", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("this.iD = id;");

				// Start of lock statement
				if(_modelClass.IsThreadSafe)
				{
					output.WriteLine("lock(this)");
					output.WriteLine("{");
					output.Indent++;
				}

				output.WriteLine("isSynced = {0}Manager._fill(this);", _modelClass.Name);

				// End of lock statement
				if(_modelClass.IsThreadSafe)
				{
					output.Indent--;
					output.WriteLine("}");
				}

				output.Indent--;
				output.WriteLine("}");
			}
			else
			{
                output.WriteXmlSummary("Instantiates a new instance of {0}.", _modelClass.Name);
                output.WriteLine("public {0}()", _modelClass.Name);
                output.WriteLine("{");
                output.WriteLine("}");
                output.WriteLine();

				output.WriteLine("public {0}(string tableName)", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;				
				output.WriteLine("this.tableName = tableName;");
				output.WriteLine("isSynced = false;");
                foreach (ClassFolder folder in _modelClass.Folders)
                {
                    foreach (object item in folder.Items)
                    {
                        if (item is ValueField)
                        {
                            ValueField f = (ValueField)item;

                            if (f.DefaultValue != string.Empty)
                            {
                                if (f.DefaultValue != string.Empty | f.DefaultValue != "")
                                    output.WriteLine("{0} = {1};", f.PrivateName, f.DefaultValue);
                                else if (f.ValueType.DefaultValue != string.Empty)
                                    output.WriteLine("{0} = {1};", f.PrivateName, f.ValueType.DefaultValue);
                            }
                        }
                    }
                }
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();

				output.WriteLine("public {0}(string tableName, int id)", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("this.iD = id;");				
				output.WriteLine("this.tableName = tableName;");
				
				// Start of lock statement
				if(_modelClass.IsThreadSafe)
				{
					output.WriteLine("lock(this)");
					output.WriteLine("{");
					output.Indent++;
				}

				output.WriteLine("isSynced = {0}Manager._fill(this);", _modelClass.Name);

				// End of lock statement
				if(_modelClass.IsThreadSafe)
				{
					output.Indent--;
					output.WriteLine("}");
				}

				output.Indent--;
				output.WriteLine("}");
			}		

			#endregion

			output.WriteRegionEnd();

            // Write methods
			output.WriteRegionBegin("Default NitroCast Methods");

			#region Load
			
			output.WriteLine("/// <summary>");
			output.WriteLine("/// Ensures that the object's fields and children are ");
			output.WriteLine("/// pre-loaded before any updates or reads.");
			output.WriteLine("/// </summary>");
			output.WriteLine("public void EnsurePreLoad()");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(!isPlaceHolder)");
			output.Indent++;
			output.WriteLine("return;");
			output.Indent--;
			output.WriteLine();		

			// Start of lock statement
			if(_modelClass.IsThreadSafe)
			{
				output.WriteLine("lock(this)");
				output.WriteLine("{");
				output.Indent++;
			}
	
			output.WriteLine("{0}Manager._fill(this);", _modelClass.Name);
			output.WriteLine("isPlaceHolder = false;");

			// End of lock statement
			if(_modelClass.IsThreadSafe)
			{
				output.Indent--;
				output.WriteLine("}");
			}

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

//			output.WriteLine("public void Load()");
//			output.WriteLine("{");
//			output.Indent++;
//			output.WriteLine("if(isPlaceHolder | !isSynced)");
//			output.WriteLine("{");
//			output.Indent++;
//			output.WriteLine("isSynced = {0}Manager._fill(this);", ___classObject.Name);
//			output.WriteLine("isPlaceHolder = false;");
//			output.Indent--;
//			output.WriteLine("}");
//			output.Indent--;
//			output.WriteLine("}");
//			output.WriteLine();

			#endregion

            #region Save

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Saves the {0} object state to the database.", _modelClass.Name);
			output.WriteLine("/// </summary>");
			output.WriteLine("public int Save()");
			output.WriteLine("{");
			output.Indent++;

			// Start of lock statement
			if(_modelClass.IsThreadSafe)
			{
				output.WriteLine("lock(this)");
				output.WriteLine("{");
				output.Indent++;
			}

			// Write save methods for child classes
			if(_modelClass.ReferenceFields.Count > 0)
			{
				foreach(ReferenceField c in _modelClass.ReferenceFields)
				{
					// Skip children without cascade save option
					if(!c.CascadeSaveEnabled)
						continue;

					if(c.HasChildrenTables)
					{
						output.WriteLine("if({0} != null)", c.PrivateName);
						output.Indent++;
						output.WriteLine("foreach({0} item in {1})", c.ReferenceType.Name, c.PrivateName);
						output.Indent++;
						output.WriteLine("item.Save();", c.PrivateName);
						output.Indent--;
						output.Indent--;
					}
					else
					{
						output.WriteLine("if({0} != null)", c.PrivateName);
						output.Indent++;
						output.WriteLine("{0}.Save();", c.PrivateName);
						output.Indent--;
					}
				}
				output.WriteLine();
			}

			output.WriteLine("if(isSynced)");
			output.Indent++;
			output.WriteLine("return iD;");
			output.Indent--;
			output.WriteLine();

            // TODO: FINISH CONCURRENCY EXCEPTION CODE!
            output.WriteLine("if(iD == -1) throw (new Exception(\"Invalid record; cannot be saved.\"));");

			output.WriteLine("if(iD == 0)");
			output.Indent++;
			output.WriteLine("iD = {0}Manager._insert(this);", _modelClass.Name);
			output.Indent--;
			output.WriteLine("else");
			output.Indent++;
			output.WriteLine("{0}Manager._update(this);", _modelClass.Name);
			output.Indent--;
            output.WriteLine("isSynced = iD != -1;");
			
			// End of lock statement
			if(_modelClass.IsThreadSafe)
			{
				output.Indent--;
				output.WriteLine("}");
			}
			output.WriteLine("return iD;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

            #region Delete

            // Begin Delete Method ---------------------------------------------
            output.WriteLine("public void Delete()");
            output.WriteLine("{");
            output.Indent++;
            if (_modelClass.IsTableCoded)
                output.WriteLine("{0}Manager._delete(this.iD);", _modelClass.Name);
            else
                output.WriteLine("{0}Manager._delete(this.tableName, this.iD);", _modelClass.Name);
            output.WriteLine("this.iD = 0;");
            output.WriteLine("isSynced = false;");
            foreach (ReferenceField c in _modelClass.ReferenceFields)
                if (c.IsUnique)
                    output.WriteLine("{0}.Delete();", c.PrivateName);
            output.Indent--;
            output.WriteLine("}");

            #endregion

			#region Duplicate

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Duplicates {0} object into a database; may or may not be the same database", _modelClass.Name);
			output.WriteLine("/// as the parent object.");
			output.WriteLine("/// </summary>");
			output.WriteLine("/// <returns> A new {0} object reflecting the replicated {0} object.</returns>", _modelClass.Name);
			if(_modelClass.IsTableCoded)
                output.WriteLine("public {0} Duplicate()", _modelClass.Name);
			else
				output.WriteLine("public {0} Duplicate(string tableName)", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			// Start of lock statement
			if(_modelClass.IsThreadSafe)
			{
				output.WriteLine("lock(this)");
				output.WriteLine("{");
			}
			output.WriteLine("{0} cloned{0} = this.Clone();", _modelClass.Name);			
			if(!_modelClass.IsTableCoded)
				output.WriteLine("cloned{0}.tableName = tableName;", _modelClass.Name);
			
//			foreach(DataRow r in ___classObject.ChildrenTable.Rows)
//			{
//				output.WriteLine("if({0} != null)", r["Name"]);
//				
//				output.Indent++;
//
//				if((bool) r["IsArray"])
//				{					
//					if((bool) r["UniqueReplication"])		// Replicate child objecs if child objects should be treated as unique.
//					{
//						output.WriteLine("{");
//						output.WriteLine("{0}[] replicated{1} = new {0}[{1}.GetUpperBound(0);", r["DataType"], r["PropertyName"]);
//                        output.WriteLine("for(int x = 0; x < {1}.Length; x++)", r["Name"]);
//						output.Indent++;
//						if((bool) r["IsTableHardCoded"])
//							output.WriteLine("replicated{0}[x] = item.Replicate(connectionString);", r["PropertyName"]);
//						else if(r["TableName"] != null)
//							output.WriteLine("replicated{0}[x] = item.Replicate(connectionString, \"{1}\");", r["PropertyName"], r["TableName"]);
//						else
//							output.WriteLine("replicated{0}[x] = item.Replicate(connectionString, {1}Table);", r["PropertyName"], r["Name"]);
//						output.Indent--;
//						output.WriteLine("copied{0}.{1} = replicated{2};", ___classObject.Name, r["Name"], r["PropertyName"]);
//						output.Indent--;
//						output.WriteLine("}");
//					}
//					else
//					{
//						// Clone array or collection for non-unique children.
//						output.WriteLine("copied{0}.{1} = {1}.Clone();", ___classObject.Name, r["Name"]);
//					}
//				}
//				if((bool) r["IsCollection"])
//				{
//					if((bool) r["UniqueReplication"])
//					{
//						output.WriteLine("{");
//						output.WriteLine("{0}Collection replicated{1} = new {0}Collection({2}.Count - 1);",
//							r["DataType"], r["PropertyName"], r["Name"]);
//						output.WriteLine("foreach({0} item in {1})", r["DataType"], r["Name"]);
//						output.Indent++;
//						if((bool) r["IsTableHardCoded"])
//							output.WriteLine("replicated{1}.Add(item.Replicate(connectionString);", r["PropertyName"]);
//						else if(r["TableName"] != null)
//							output.WriteLine("replicated{1}.Add(item.Replicate(connectionString, \"{1}\");", r["PropertyName"],	r["TableName"]);
//						else
//							output.WriteLine("replicated{1}.Add(item.Replicate(connectionString, {1}Table);", r["PropertyName"], r["Name"]);
//						output.Indent--;
//						output.WriteLine("copied{0}.{1} = replicated{2};", ___classObject.Name, r["Name"], r["PropertyName"]);
//						output.Indent--;
//						output.WriteLine("}");
//					}
//					else
//					{
//						output.WriteLine("copied{0}.{1} = {1}.Clone();", ___classObject.Name, r["Name"]);
//					}
//				}
//				else
//				{
//					output.Indent++;
//					if((bool) r["IsTableHardCoded"])
//						output.WriteLine("copied{0}.{1} = {1}.Replicate(connectionString);", ___classObject.Name, r["Name"]);
//					else if(r["TableName"] != null)
//						output.WriteLine("copied{0}.{1} = {1}.Replicate(connectionString, \"{2}\");", ___classObject.Name, r["Name"], r["TableName"]);
//					else
//						output.WriteLine("copied{0}.{1} = {1}.Replicate(connectionString, tableName);", ___classObject.Name, r["Name"]);
//					
//				}
//			}

			output.WriteLine();
			output.WriteLine("// Insert must be called after children are replicated!");
			output.WriteLine("cloned{0}.iD = {0}Manager._insert(cloned{0});", _modelClass.Name);
			output.WriteLine("cloned{0}.isSynced = true;", _modelClass.Name);
			output.WriteLine("return cloned{0};", _modelClass.Name);
			
			// End of lock statement
			if(_modelClass.IsThreadSafe)
				output.WriteLine("}");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region Overwrite

			output.WriteXmlSummary("Overwrites and existing {0} object in the database.", _modelClass.Name);
			output.WriteLine("public void Overwrite(int id)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("iD = id;");
			output.WriteLine("{0}Manager._update(this);", _modelClass.Name);
			output.WriteLine("isSynced = true;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region Clone

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Clones {0} object and clones child objects with cloning or replication.", _modelClass.Name);
			output.WriteLine("/// as the parent object.");
			output.WriteLine("/// </summary>");
			output.WriteLine("/// <returns> A new {0} object reflecting the replicated {0} object.</returns>", _modelClass.Name);
			output.WriteLine("object ICloneable.Clone()");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return Clone();");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Clones {0} object and clones child objects with cloning or replication.", _modelClass.Name);
			output.WriteLine("/// as the parent object.");
			output.WriteLine("/// </summary>");
			output.WriteLine("/// <returns> A new {0} object reflecting the replicated {0} object.</returns>", _modelClass.Name);
			output.WriteLine("public {0} Clone()", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			
			// Start of lock statement
			if(_modelClass.IsThreadSafe)
			{
				output.WriteLine("lock(this)");
				output.WriteLine("{");
			}

			output.WriteLine("{0} cloned{0} = new {0}();", _modelClass.Name);
			output.WriteLine("cloned{0}.iD = iD;", _modelClass.Name);
			if(!_modelClass.IsTableCoded)
				output.WriteLine("cloned{0}.tableName = tableName;", _modelClass.Name);
			output.WriteLine("cloned{0}.isSynced = isSynced;", _modelClass.Name);
			foreach(ValueField f in _modelClass.ValueFields)
				output.WriteLine("cloned{0}.{1} = {1};", _modelClass.Name, f.PrivateName);
			output.WriteLine();
            foreach (EnumField e in _modelClass.EnumFields)
                output.WriteLine("cloned{0}.{1} = {1};", _modelClass.Name, e.PrivateName);
            output.WriteLine();

			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				output.WriteLine("if({0} != null)", c.PrivateName);
				
				output.Indent++;

				if(c.IsArray)
				{					
					if(c.IsUnique)		// Replicate child objecs if child objects should be treated as unique.
					{
						output.WriteLine("{");
						output.WriteLine("{0}[] replicated{1} = new {0}[{1}.GetUpperBound(0);", c.ReferenceType, c.Name);
						output.WriteLine("for(int x = 0; x < {1}.Length; x++)", c.PrivateName);
						output.Indent++;
						if(c.ReferenceType.IsTableCoded)
							output.WriteLine("replicated{0}[x] = item.Replicate();", c.Name);
						else if(c.TableName != string.Empty)
							output.WriteLine("replicated{0}[x] = item.Replicate(\"{1}\");", c.Name, c.TableName);
						else
							output.WriteLine("replicated{0}[x] = item.Replicate({1}Table);", c.Name, c.PrivateName);
						output.Indent--;
						output.WriteLine("cloned{0}.{1} = replicated{2};", _modelClass.Name, c.PrivateName, c.Name);
						output.Indent--;
						output.WriteLine("}");
					}
					else
					{
						// Clone array or collection for non-unique children.
						output.WriteLine("cloned{0}.{1} = {1}.Clone();", _modelClass.Name, c.PrivateName);
					}
				}
				if(c.IsCollection)
				{
					if(c.IsUnique)
					{
						output.WriteLine("{");
						output.WriteLine("{0}Collection replicated{1} = new {0}Collection({2}.Count - 1);",
							c.ReferenceType, c.Name, c.PrivateName);
						output.WriteLine("foreach({0} item in {1})", c.ReferenceType, c.PrivateName);
						output.Indent++;
						if(c.ReferenceType.IsTableCoded)
							output.WriteLine("replicated{1}.Add(item.Duplicate();", c.Name);
						else if(c.TableName != string.Empty)
							output.WriteLine("replicated{1}.Add(item.Duplicate(\"{1}\");", c.Name, c.TableName);
						else
							output.WriteLine("replicated{1}.Add(item.Duplicate({1}Table);", c.Name, c.PrivateName);
						output.Indent--;
						output.WriteLine("cloned{0}.{1} = replicated{2};", _modelClass.Name, c.PrivateName, c.Name);
						output.Indent--;
						output.WriteLine("}");
					}
					else
					{
						output.WriteLine("cloned{0}.{1} = {1}.Clone();", _modelClass.Name, c.PrivateName);
					}
				}
				else
				{
					if(c.IsUnique)
					{
						if(c.ReferenceType.IsTableCoded)
							output.WriteLine("cloned{0}.{1} = {1}.Duplicate();", _modelClass.Name, c.PrivateName);
						else if(c.TableName != string.Empty)
							output.WriteLine("cloned{0}.{1} = {1}.Duplicate(\"{2}\");", _modelClass.Name, c.PrivateName, c.TableName);
						else
							output.WriteLine("cloned{0}.{1} = {1}.Duplicate(tableName);", _modelClass.Name, c.PrivateName);
					}
					else
					{
						output.WriteLine("cloned{0}.{1} = {1};", _modelClass.Name, c.PrivateName);
					}
				}
				output.Indent--;
				output.WriteLine();
			}
			output.WriteLine("return cloned{0};", _modelClass.Name);

			// End of lock statement
			if(_modelClass.IsThreadSafe)
				output.WriteLine("}");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

            #region Copy

            output.WriteLine("/// <summary>");
            output.WriteLine("/// Makes a deep copy of the current {0}.", _modelClass.Name);
            output.WriteLine("/// </summary>");
            output.WriteLine("/// <returns> A new {0} object reflecting the cloned {0} object.</returns>", _modelClass.Name);
            output.WriteLine("public {0} Copy()", _modelClass.Name);
            output.WriteLine("{");
            output.Indent++;

            output.WriteLine("{0} {1} = new {0}();", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("CopyTo({0});", _modelClass.PrivateName);
            output.WriteLine("return {0};", _modelClass.PrivateName);

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            output.WriteLine("/// <summary>");
            output.WriteLine("/// Makes a deep copy of the current {0}.", _modelClass.Name);
            output.WriteLine("/// </summary>");
            output.WriteLine("/// <returns> A new {0} object reflecting the cloned {0} object.</returns>", _modelClass.Name);
            output.WriteLine("/// <param name=\"isolation\">Placeholders are used to isolate the {0} from its children.</param>", _modelClass.Name);
            output.WriteLine("public {0} Copy(bool isolation)", _modelClass.Name);
            output.WriteLine("{");
            output.Indent++;

            output.WriteLine("{0} {1} = new {0}();", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("CopyTo({0}, isolation);", _modelClass.PrivateName);
            output.WriteLine("return {0};", _modelClass.PrivateName);

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region CopyTo

            output.WriteLine("/// <summary>");
            output.WriteLine("/// Deep copies the current {0} to another instance of {0}.", _modelClass.Name);
            output.WriteLine("/// This method does not provide isolated copies; use overriden method for this feature.");
            output.WriteLine("/// </summary>");
            output.WriteLine("/// <param name=\"{0}\">The {0} to copy to.</param>", _modelClass.Name);
            output.WriteLine("public void CopyTo({0} {1})", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("CopyTo({0}, false);", _modelClass.PrivateName);
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            output.WriteLine("/// <summary>");
            output.WriteLine("/// Deep copies the current {0} to another instance of {0}.", _modelClass.Name);
            output.WriteLine("/// </summary>");
            output.WriteLine("/// <param name=\"{0}\">The {0} to copy to.</param>", _modelClass.Name);
            output.WriteLine("/// <param name=\"isolation\">Placeholders are used to isolate the {0} from its children.</param>", _modelClass.Name);
            output.WriteLine("public void CopyTo({0} {1}, bool isolation)", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("{");
            output.Indent++;

            // Start of lock statement
            if (_modelClass.IsThreadSafe)
            {
                output.WriteLine("lock(this)");
                output.WriteLine("{");
                output.Indent++;
            }

            output.WriteLine("{0}.iD = iD;", _modelClass.PrivateName);
            if (!_modelClass.IsTableCoded)
                output.WriteLine("{0}.tableName = tableName;", _modelClass.PrivateName);
            output.WriteLine("{0}.isPlaceHolder = isPlaceHolder;", _modelClass.PrivateName);
            output.WriteLine("{0}.isSynced = isSynced;", _modelClass.PrivateName);

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;
                        output.WriteLine("{0}.{1} = {1};", _modelClass.PrivateName, f.PrivateName);
                    }
                    if (item is ReferenceField)
                    {
                        ReferenceField c = (ReferenceField)item;
                        output.WriteLine("if({0} != null)", c.PrivateName);
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("if(isolation)");
                        output.WriteLine("{");
                        output.Indent++;
                        if (c.HasChildrenTables)
                        {
                            output.WriteLine("{0}.{1} = {1}.Copy(true);", _modelClass.PrivateName, c.PrivateName);
                        }
                        else
                        {
                            output.WriteLine("{0}.{1} = {1}.NewPlaceHolder();", _modelClass.PrivateName, c.PrivateName);
                        }
                        output.Indent--;
                        output.WriteLine("}");
                        output.WriteLine("else");
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("{0}.{1} = {1}.Copy(false);", _modelClass.PrivateName, c.PrivateName);
                        output.Indent--;
                        output.WriteLine("}");
                        output.Indent--;
                        output.WriteLine("}");
                    }
                    if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;
                        output.WriteLine("{0}.{1} = {1};", _modelClass.PrivateName, e.PrivateName);
                    }
                }
            }

            // End of lock statement
            if (_modelClass.IsThreadSafe)
            {
                output.Indent--;
                output.WriteLine("}");
            }

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region NewPlaceHolder

            output.WriteLine("public {0} NewPlaceHolder()", _modelClass.Name);
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("{0} {1} = new {0}();", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("{0}.iD = iD;", _modelClass.PrivateName);
            if (!_modelClass.IsTableCoded)
                output.WriteLine("{0}.tableName = tableName;", _modelClass.PrivateName);
            output.WriteLine("{0}.isPlaceHolder = true;", _modelClass.PrivateName);
            output.WriteLine("{0}.isSynced = true;", _modelClass.PrivateName);
            output.WriteLine("return {0};", _modelClass.PrivateName);
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region static NewPlaceHolder

            if (_modelClass.IsTableCoded)
				output.WriteLine("public static {0} NewPlaceHolder(int iD)", _modelClass.Name);
			else
				output.WriteLine("public static {0} NewPlaceHolder(string tableName, int iD)", _modelClass.Name);
            			
			output.WriteLine("{");
			output.Indent++;

			output.WriteLine("{0} {1} = new {0}();", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("{0}.iD = iD;", _modelClass.PrivateName);
            if(!_modelClass.IsTableCoded)
                output.WriteLine("{0}.tableName = tableName;", _modelClass.PrivateName);
            output.WriteLine("{0}.isPlaceHolder = true;", _modelClass.PrivateName);
            output.WriteLine("{0}.isSynced = true;", _modelClass.PrivateName);
            output.WriteLine("return {0};", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region CollectionChanged Handlers

            if (_modelClass.ReferenceFields.Count > 0)
            {
                output.WriteLine("private void childrenCollection_Changed(object sender, System.EventArgs e)");
                output.WriteLine("{");
                output.Indent++;
                output.WriteLine("isSynced = false;");
                output.Indent--;
                output.WriteLine("}");
                output.WriteLine();
            }

			#endregion

			output.WriteRegionEnd();

			#region IComparable Methods

			output.WriteRegionBegin("IComparable Methods");
			
			output.WriteXmlSummary("Compares the object's ID to another object's ID.");
			output.WriteLine("int IComparable.CompareTo(object obj)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("{0} {1} = ({0}) obj;", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("return this.iD - {0}.iD;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteXmlSummary("Compares the object's ID to another object's ID.");
			output.WriteLine("public int CompareTo({0} {1})", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return this.iD - {0}.iD;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#region Equals Override

            //output.WriteLine("public override bool Equals(object {0})", _modelClass.PrivateName);
            //output.WriteLine("{");
            //output.WriteLine("\tif({0} == null)", _modelClass.PrivateName);
            //output.WriteLine("\t\treturn false;");
            //output.WriteLine();
            //output.WriteLine("\treturn Equals(({0}) {1});", _modelClass.Name, _modelClass.PrivateName);
            //output.WriteLine("}");
            //output.WriteLine();
			
            //output.WriteLine("public bool Equals({0} {1})", _modelClass.Name, _modelClass.PrivateName);
            //output.WriteLine("{");
            //output.WriteLine("\tif({0} == null)", _modelClass.PrivateName);
            //output.WriteLine("\t\treturn false;");
            //output.WriteLine();
		
			
            //if(_modelClass.IsTableCoded)
            //{
            //    output.WriteLine("\treturn this.iD == {0}.iD;", _modelClass.PrivateName);
            //}
            //else
            //{
            //    output.WriteLine("\treturn this.iD == {0}.iD &&", _modelClass.PrivateName);
            //    output.WriteLine("\t\tthis.tableName == {0}.tableName;", _modelClass.PrivateName);
            //}
            //output.WriteLine("}");
            //output.WriteLine();

			output.WriteLine("public override int GetHashCode()");
			output.WriteLine("{");
			
			if(_modelClass.IsTableCoded)			
            {
                output.WriteLine("\treturn iD.GetHashCode();");
			}
			else
			{
                output.WriteLine("\treturn iD.GetHashCode() +");				
				output.WriteLine("\t\ttableName.GetHashCode();");
			}
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			output.WriteRegionEnd();

			#endregion

            if (_modelClass.ToStringOverride.Length > 0)
            {
                output.WriteLine("public override string ToString()");
                output.WriteLine("{");
                output.Indent++;
                output.WriteLine("return " + _modelClass.ToStringOverride + ";");
                output.Indent--;
                output.WriteLine("}");
            }

			if(CustomCode != null)
			{
				if(CustomCode.Length > 0)
				{
					output.WriteLine("//--- Begin Custom Code ---");
					output.WriteDirect(CustomCode);
					output.WriteLine("//--- End Custom Code ---");
				}
			}

			// End Class Declaration -------------------------------------------
			output.Indent--;
			output.WriteLine("}");

			// End Namespace Declaration ---------------------------------------
			output.Indent--;
			output.WriteLine("}");

			return output.ToString();
		}
	}
}