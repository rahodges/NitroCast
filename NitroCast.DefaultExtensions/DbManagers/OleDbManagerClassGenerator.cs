/* ==================================================================== *
 * OLEDBMANAGER GENERATOR												*
 * Copyright © 2002-2006 Roy A.E. Hodges. All Rights Reserved.			*
 * -------------------------------------------------------------------- *
 * November 1, 2006 - connectionStrings are now using public prop.		*
 * October 14, 2006 - Implements GreyFoxManager Baseclass				*
 * ==================================================================== */

using System;
using System.Collections;
using System.Data;
using NitroCast.Core;
using NitroCast.Core.Extensions;

namespace NitroCast.Extensions.Default
{
	/// <summary>
	/// Summary description for ManagerClassGenerator.
	/// </summary>
    //[PluginAttribute("Default OleDbManager Class",
    //    "Roy A.E. Hodges",
    //    "Copyright © 2003-2004 Roy A.E. Hodges. All Rights Reserved.",
    //    "{0}Manager.cs",
    //    "Default datalayer manager class for the __classObject in design. This manager utilizes \"System.Data.OleDb\".",
    //    "\\Default\\OleDbManager Class")]
	public class OleDbManagerClassGenerator : OutputExtension
	{
		const string sprocPrefix = "@";

		#region Generate Method

        public override string Render()
		{
			if(_modelClass.ValueFields.Count == 0)
				return "Error: Object class contains no fields.";

			CodeWriter output = new CodeWriter();
			output.CurrentClass = _modelClass;

            output.WriteLine("/* ********************************************************** *");
            output.WriteLine(" * AMNS NitroCast v1.0 OleDbManager Data Tier                   *");
            output.WriteLine(" * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *");
            output.WriteLine(" * All Rights Reserved                                        *");
            output.WriteLine(" * ---------------------------------------------------------- *");
            output.WriteLine(" * Source code may not be reproduced or redistributed without *");
            output.WriteLine(" * written expressed permission from the author.              *");
            output.WriteLine(" * Permission is granted to modify source code by licencee.   *");
            output.WriteLine(" * These permissions do not extend to third parties.          *");
            output.WriteLine(" * ********************************************************** */");
            output.WriteLine();
            			
			#region Namespaces

			//
			// Add default namespaces
			//

			output.WriteLine("using System;");
            if (_modelClass.ParentModel.ConnectionStringIsCoded && 
                _modelClass.ParentModel.ConnectionStringIsConfigKey)
            {
                output.WriteLine("using System.Configuration;");
            }
			output.WriteLine("using System.Data;");
			output.WriteLine("using System.Data.OleDb;");
			output.WriteLine("using System.Text;");
			if(_modelClass.IsCachingEnabled)
			{
				output.WriteLine("using System.Web;");
				output.WriteLine("using System.Web.Caching;");
			}
            output.WriteLine("using Amns.GreyFox.Data;");

			//
			// Add imported namespaces
			//
			int importCount = -1;
			bool addImport = true;
			string[] namespacelist = new string[20];
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				addImport = true;

				foreach(string name in namespacelist)
					if(c.ReferenceType.NameSpace == name | c.ReferenceType.NameSpace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}
				
				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = c.ReferenceType.NameSpace;										
				}
								
//				if(c.DataType.ParentClassEntry != null)
					foreach(ReferenceField subChild in c.ReferenceType.ParentClassEntry.ReferenceFields)
					{
						addImport = true;
	
						foreach(string name in namespacelist)
							if(subChild.ReferenceType.NameSpace == name | subChild.ReferenceType.NameSpace == _modelClass.Namespace)
							{
								addImport = false;
								break;
							}

						if(addImport)
						{
							importCount++;
							namespacelist[importCount] = subChild.ReferenceType.NameSpace;
						}
					}				
			}

			for(int x = 0; x <= importCount; x++)
				output.WriteLine("using {0};", namespacelist[x]);

			output.WriteLine();
			output.WriteLine("namespace {0}", _modelClass.Namespace);
			
			#endregion

			output.WriteLine("{");
			output.Indent++;			

			#region GetCollectionParseChildren Enum

			if(_modelClass.ReferenceFields.Count > 0 & _modelClass.ReferenceFields.LastOneToManyRelation != -1)
			{
                output.WriteLine("#region Child Flags Enumeration");
                output.WriteLine();

				output.Write("public enum <.C>Flags : int { ");
				
				for(int x = 0; x < _modelClass.ReferenceFields.Count; x++)
				{
					if(_modelClass.ReferenceFields[x].HasChildrenTables)
						continue;

					if(!_modelClass.ReferenceFields[x].IsTableCoded)
						continue;
                    
					output.WriteSeparation(_modelClass.ReferenceFields[x].Name, string.Empty, ",");
					
					if(_modelClass.ReferenceFields[x].ReferenceType.ParentClassEntry != null)
						foreach(ReferenceField subChild in _modelClass.ReferenceFields[x].ReferenceType.ParentClassEntry.ReferenceFields)
						{
							output.WriteSeparation(_modelClass.ReferenceFields[x].Name + subChild.Name,
								string.Empty, ",");
						}
				}

				//
				// Remove trailing comma
				//
				output.WriteSeparationEnd("};");
				output.WriteLine();

                output.WriteLine("#endregion");
                output.WriteLine();
			}

			#endregion

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Datamanager for {0} objects.", _modelClass.Name);
			output.WriteLine("/// </summary>");
            output.WriteLine("[ExposedManager(\"" + _modelClass.Name + "\", " +
				"\"" + _modelClass.Description + "\", " +
				_modelClass.IsTableCoded.ToString().ToLower() + ", " +
				"1, 1, 6234)]");
			output.WriteLine("public class {0}Manager : IGreyFoxManager", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;

            output.WriteLine("#region Manager Fields");
            output.WriteLine();

			output.WriteLine("// Static Fields");
			output.WriteLine("static bool isInitialized;");
			output.WriteLine("static string connectionString;");
			output.WriteLine();

            output.WriteLine("// Private Fields");
            output.WriteLine(LineDependency.CodedTable, "string tableName = \"" + _modelClass.DefaultTableName + "\";");
            output.WriteLine(LineDependency.NonCodedTable, "string tableName;");
            foreach (ReferenceField child in _modelClass.ReferenceFields)
            {
                if (child.IsTableCoded & !child.ReferenceType.IsTableCoded)
                {
                    output.WriteLine("public static readonly string {0}Table = \"{1}\";",
                        child.Name, child.TableName);
                }
            }
			output.WriteLine();
			output.WriteLine();

			output.WriteLine("public string TableName");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get { return tableName; }");
			output.WriteLine("set { tableName = value; }");
			output.Indent--;
			output.WriteLine("}");;
			output.WriteLine();

			// Caching
			if(_modelClass.IsCachingEnabled)
			{
				output.WriteLine("// Hashtable to cache separate tables");
				output.WriteLine("static bool cacheEnabled	= true;");

				output.WriteLine("public static bool CacheEnabled");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("get { return cacheEnabled; }");
				output.WriteLine("set { cacheEnabled = value; }");
				output.Indent--;
				output.WriteLine("}");;
				output.WriteLine();
			}

            output.WriteLine("#endregion");
            output.WriteLine();

			#region Readonly Field List For GetCollection method

            output.WriteLine("#region Inner Join Field Array");
            output.WriteLine();
            
            output.WriteLine("public static readonly string[] InnerJoinFields = new string[] {");
            output.Indent++;
            output.WriteCommaLine("\"{0}ID\"", _modelClass.Name);

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ReferenceField)
                    {
                        ReferenceField r = (ReferenceField)item;
                        if (!r.HasChildrenTables)
                        {
                            if (!r.IsTableCoded & !r.ReferenceType.IsTableCoded)
                            {
                                output.WriteCommaLine("\"{0}Table\"", r.Name);
                            }
                            output.WriteCommaLine("\"{0}ID\"", r.Name);
                        }
                    }
                    else if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;
                        output.WriteCommaLine("\"{0}\"", f.ColumnName);
                    }
                    else if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;
                        output.WriteCommaLine("\"{0}\"", e.ColumnName);
                    }
                }
            }
            output.WriteLine(); // End the commalines

            output.Indent--;
            output.WriteLine("};");
            output.WriteLine();

            output.WriteLine("#endregion");
            output.WriteLine();
            
            output.WriteLine("#region Join Field Array");
            output.WriteLine();

            output.ResetCommaLine();

            output.WriteLine("public static readonly string[,] JoinFields = new string[,] {");
            output.Indent++;
            output.WriteCommaLine("{{ \"{0}ID\", \"LONG\", \"-1\" }}", _modelClass.Name);

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ReferenceField)
                    {
                        ReferenceField r = (ReferenceField)item;
                        if (!r.HasChildrenTables)
                        {
                            if (!r.IsTableCoded & !r.ReferenceType.IsTableCoded)
                            {
                                output.WriteCommaLine("{{ \"{0}Table\", " +
                                    "\"TEXT(255)\", \"\" }}", r.Name);
                            }
                            output.WriteCommaLine("{{ \"{0}ID\", " +
                                "\"LONG\", \"null\" }}", r.Name);
                        }
                    }
                    else if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;
                        if (f.DefaultValue.Length > 0)
                        {
                            output.WriteCommaLine("{{ \"{0}\", \"{1}\", \"{2}\" }}",
                                f.ColumnName,
                                string.Format(f.ValueType.DbType, f.Length),
                                f.DefaultValue);
                        }
                        else
                        {
                            output.WriteCommaLine("{{ \"{0}\", \"{1}\", \"{2}\" }}",
                                f.ColumnName,
                                string.Format(f.ValueType.DbType, f.Length),
                                f.ValueType.DefaultValue);
                        }
                    }
                    else if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;
                        output.WriteCommaLine("{{ \"{0}\", \"{1}\", \"0\" }}", 
                            e.ColumnName, 
                            e.EnumType.ParentEnumEntry.ValueType.DbType);
                    }
                }
            }
            output.WriteLine(); // End the commalines

			output.Indent--;
			output.WriteLine("};");
			output.WriteLine();

            output.WriteLine("#endregion");
            output.WriteLine();

			#endregion

			#region Constructors

			output.WriteLine("#region Default NitroCast Constructors");
			output.WriteLine();

            #region Static Constructor

            output.WriteLine("static <.C>Manager()");
            output.WriteLine("{");
            output.Indent++;
            if (_modelClass.ParentModel.ConnectionStringIsConfigKey)
            {
                output.WriteLine("connectionString = ConfigurationManager.AppSettings[\"" +
                    _modelClass.ParentModel.ConnectionString +
                    "\"];");
            }
            else
            {
                output.WriteLine("connectionString = \"" + 
                    _modelClass.ParentModel.ConnectionString + 
                    "\";");
            }
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region Public Constructor

            if (_modelClass.IsTableCoded)
            {
                output.WriteLine("public <.C>Manager()");
            }
            else
            {
                output.WriteLine("public <.C>Manager(string tableName)");
            }
			output.WriteLine("{");
			output.Indent++;
			if(!_modelClass.IsTableCoded)
				output.WriteLine("this.tableName = tableName;");
			output.Indent--;
			output.WriteLine("}");

            #endregion

			output.WriteLine();
			output.WriteLine("#endregion");
			output.WriteLine();

            #endregion

			#region Initialize

			output.WriteLine("#region Default NitroCast Constructors");
			output.WriteLine();

			output.WriteLine("// Initialize");
			output.WriteLine("public void Initialize(string connectionString)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(!{0}Manager.isInitialized)", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("{0}Manager.isInitialized = true;", _modelClass.Name);
			output.WriteLine("{0}Manager.connectionString = connectionString;", _modelClass.Name);
			output.Indent--;
			output.WriteLine("}");
            //output.WriteLine("else");
            //output.WriteLine("{");
            //output.Indent++;
            //output.WriteLine("throw(new Exception(\"Manager has already been initialized.\"));");
            //output.Indent--;
            //output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

            #region Insert Method

            output.WriteLine("#region Default NitroCast Insert Method");
			output.WriteLine();

			output.WriteLine("/// <summary>");
			output.WriteLine("/// Inserts a {0} into the database. All children should have been", _modelClass.Name);
			output.WriteLine("/// saved to the database before insertion. New children will not be");
			output.WriteLine("/// related to this object in the database.");
			output.WriteLine("/// </summary>");
			output.WriteLine("/// <param name=\"_{0}\">The {0} to insert into the database.</param>",
				_modelClass.Name);
			if(_modelClass.IsTableCoded)
				output.WriteLine("internal static int _insert({0} {1})", _modelClass.Name, _modelClass.PrivateName);
			else
				output.WriteLine("internal static int _insert({0} {1})", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;
			
			if(_modelClass.IsCreateDateEnabled)
			{
				output.WriteLine("// Set Create Date to Now");
				output.WriteLine("<.c>.CreateDate = DateTime.Now.ToUniversalTime();");
				output.WriteLine();
			}

			if(_modelClass.IsModifyDateEnabled)
			{
				output.WriteLine("// Set Modify Date to Now");
				output.WriteLine("<.c>.ModifyDate = DateTime.Now.ToUniversalTime();");
				output.WriteLine();
			}

			output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);", _modelClass.PrivateName);
			output.WriteLine("OleDbCommand dbCommand = new OleDbCommand();");
			output.WriteLine("dbCommand.Connection = dbConnection;");
			
			output.Write("dbCommand.CommandText = \"INSERT INTO ");

			if(_modelClass.IsTableCoded)
				output.Write("{0}", _modelClass.DefaultTableName);
			else
				output.Write(sprocPrefix + "TableName");

			output.Write(" (");

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ReferenceField)
                    {
                        ReferenceField c = (ReferenceField)item;
                        if(c.ReferenceMode == ReferenceMode.Normal)
                        {
                            if (!c.IsTableCoded)
                                output.WriteSeparation(string.Format("{0}Table", c.Name), "\"", ",\" +");
                            if (!c.HasChildrenTables)
                                output.WriteSeparation(string.Format("{0}ID", c.Name), "\"", ",\" +");
                        }
                    }
                    else if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;
                        output.WriteSeparation(string.Format("{0}", f.ColumnName), "\"", ",\" +");
                    }
                    else if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;
                        output.WriteSeparation(string.Format("{0}", e.ColumnName), "\"", ",\" +");
                    }
                }
            }				

			output.WriteSeparationReset(") VALUES (", "\"", "\" +");

			//
			// Output Query Parameters
			//
            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ReferenceField)
                    {
                        ReferenceField c = (ReferenceField)item;
                        
                        if (c.ReferenceMode == ReferenceMode.Normal)
                        {
                            if (!c.IsTableCoded)
                                output.WriteSeparation(string.Format("{0}{1}Table",
                                    sprocPrefix, c.Name), "\"", ",\" +");

                            if (!c.HasChildrenTables)
                                output.WriteSeparation(string.Format("{0}{1}ID", 
                                    sprocPrefix, c.Name), "\"", ",\" +");
                        }
                    }
                    else if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;
                        output.WriteSeparation(string.Format("{0}{1}", 
                            sprocPrefix, f.ColumnName), "\"", ",\" +");
                    }
                    else if (item is EnumField)
                    {
                        EnumField f = (EnumField)item;
                        output.WriteSeparation(string.Format("{0}{1}", 
                            sprocPrefix, f.ColumnName), "\"", ",\" +");
                    }
                }
            }				

			output.WriteSeparationEnd(");\";");
			output.WriteLine();

			//
			// Output TableName Parameter
			//
			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("//");
				output.WriteLine("// Output TableName Parameter ");
				output.WriteLine("//");
				output.WriteLine("dbCommand.CommandText = dbCommand.CommandText.Replace(\"" + sprocPrefix + "TableName\", {0}.tableName);", _modelClass.PrivateName);
				output.WriteLine();
			}

            output.WriteLine("fillParameters(dbCommand, {0});", _modelClass.PrivateName);
								
			output.WriteLine();			
			output.WriteLine("dbConnection.Open();");
			output.WriteLine("dbCommand.ExecuteNonQuery();");
			//output.WriteLine("dbCommand.CommandType = CommandType.Text;");
			output.WriteLine("dbCommand.CommandText = \"SELECT @@IDENTITY AS IDVal\";");
			output.WriteLine("int id = (int) dbCommand.ExecuteScalar();");

			// Save children array relationships, not the actual objects
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				if(!c.HasChildrenTables)
					continue;

				// NOTE! ITEMS SHOULD BE SAVED WITH VALID ID'S BEFORE THIS OCCURS!
				// Call the save method on the object if the object is not saved.
				// Think of somehow throwing an exception for objects in the array that
				// do not have an id, perhaps this is not so easy.

				output.WriteLine();
				output.WriteLine("// Save child relationships for {0}.", c.Name);
                output.WriteLine("if({0}.{1} != null)", _modelClass.PrivateName, c.PrivateName);
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("dbCommand.Parameters.Clear();");
				output.WriteLine("dbCommand.CommandText = \"INSERT INTO {0}Children_{1} \" +", _modelClass.DefaultTableName, c.Name);
				output.Indent++;
				if(_modelClass.Name != c.ReferenceType.Name)
				{
					output.WriteLine("\"({0}ID, {1}ID)\" + ", _modelClass.Name, c.ReferenceType.Name);
					output.WriteLine("\" VALUES (" + sprocPrefix + "{0}ID, " + sprocPrefix + "{1}ID);\";", _modelClass.Name, c.ReferenceType.Name);
					output.Indent--;
					output.WriteLine("dbCommand.Parameters.Add(\"" + sprocPrefix + "{0}ID\", OleDbType.Integer);", _modelClass.Name);
					output.WriteLine("dbCommand.Parameters.Add(\"" + sprocPrefix + "{0}ID\", OleDbType.Integer);", c.ReferenceType.Name);
					output.WriteLine("foreach({0} item in {1}.{2})", c.ReferenceType.Name, _modelClass.PrivateName, c.PrivateName);
					output.WriteLine("{");
					output.Indent++;
					output.WriteLine("dbCommand.Parameters[\"" + sprocPrefix + "{0}ID\"].Value = id;", _modelClass.Name);				
					output.WriteLine("dbCommand.Parameters[\"" + sprocPrefix + "{0}ID\"].Value = item.ID;", c.ReferenceType.Name);
				}
				else
				{
					output.WriteLine("\"({0}ID, {1}ChildID)\" + ", _modelClass.Name, c.ReferenceType.Name);
					output.WriteLine("\" VALUES (" + sprocPrefix + "{0}ID, " + sprocPrefix + "{1}ChildID);\";", _modelClass.Name, c.ReferenceType.Name);
					output.Indent--;
					output.WriteLine("dbCommand.Parameters.Add(\"" + sprocPrefix + "{0}ID\", OleDbType.Integer);", _modelClass.Name);
					output.WriteLine("dbCommand.Parameters.Add(\"" + sprocPrefix + "{0}ChildID\", OleDbType.Integer);", c.ReferenceType.Name);
					output.WriteLine("foreach({0} item in {1}.{2})", c.ReferenceType.Name, _modelClass.PrivateName, c.PrivateName);
					output.WriteLine("{");
					output.Indent++;
					output.WriteLine("dbCommand.Parameters[\"" + sprocPrefix + "{0}ID\"].Value = id;", _modelClass.Name);				
					output.WriteLine("dbCommand.Parameters[\"" + sprocPrefix + "{0}ChildID\"].Value = item.ID;", c.ReferenceType.Name);
				}
				output.WriteLine("dbCommand.ExecuteNonQuery();");
				output.Indent--;
				output.WriteLine("}");
				output.Indent--;
				output.WriteLine("}");
			}

			output.WriteLine();
			output.WriteLine("dbConnection.Close();");

			// Add item to cache
			if(_modelClass.IsCachingEnabled)
			{
				output.WriteLine("// Store <.c> in cache.");
				output.WriteLine("if(cacheEnabled) cacheStore(<.c>);");
			}

			if(_modelClass.IsCollectionCachingEnabled)
			{
				output.WriteLine("// ************************* WARNING **************************** ");
				output.WriteLine("// Insert operations must invalidate the cached collections.");
				output.WriteLine("// Invalidation MUST invalidate any foreign cached collections that ");
				output.WriteLine("// with children objects this manager provides or else the foreign ");
				output.WriteLine("// caches retain invalidated and potentially corrupt data! ");
				output.WriteLine("// NOTE:");
				output.WriteLine("// NitroCast only allows collection caching on objects that do not ");
				output.WriteLine("// have any children objects to minimize potential corruption. ");
				output.WriteLine("invalidateCachedCollections();");
			}

			output.WriteLine("return id;");
			
			
			// End Insert Method Declaration
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Update

			output.WriteLine("#region Default NitroCast Update Method");
			output.WriteLine();

			// Write Update Method
			output.WriteLine("internal static int _update({0} {1})", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;
			
			output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);", _modelClass.PrivateName);
			output.WriteLine("OleDbCommand dbCommand = new OleDbCommand();");
			output.WriteLine("dbCommand.Connection = dbConnection;");
			output.Write("dbCommand.CommandText = \"UPDATE ");
			if(_modelClass.IsTableCoded)
				output.Write(_modelClass.DefaultTableName);
			else
				output.Write(sprocPrefix + "TableName");
			output.Write(" SET ");

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ReferenceField)
                    {
                        ReferenceField c = (ReferenceField)item;
                        
                        if (!c.HasChildrenTables)
                        {
                            if (!c.IsTableCoded)
                                output.WriteSeparation(string.Format("{0}Table=" + 
                                    sprocPrefix + "{0}Table", c.Name), "\"", ",\" +");

                            output.WriteSeparation(string.Format("{0}ID=" + 
                                sprocPrefix + "{0}ID", c.Name), "\"", ",\" +");
                        }
                    }
                    else if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;
                        output.WriteSeparation(string.Format("{0}=" + 
                            sprocPrefix + "{0}", f.ColumnName, f.ColumnName), "\"", ",\" +");
                    }
                    else if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;
                        output.WriteSeparation(string.Format("{0}=" + 
                            sprocPrefix + "{0}", e.ColumnName, e.ColumnName), "\"", ",\" +");
                    }
                }
            }

			// Uncomment line for SQL Server Compatability
			output.WriteSeparationEnd();
            
            if (_modelClass.Concurrency == ConcurrencyType.OptimisticFull)
            {
                output.WriteLine(" WHERE {0}ID=" + sprocPrefix + "{0}ID AND " +
                    "ModifyDate=" + sprocPrefix + "OptimisticModifyDate;", _modelClass.Name);
            }
            else
            {
                output.WriteLine(" WHERE {0}ID=" + sprocPrefix + "{0}ID\";", _modelClass.Name);
            }
			
			output.WriteLine();

			//
			// Output TableName Parameter
			//
			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("//");
				output.WriteLine("// Output TableName Parameter ");
				output.WriteLine("//");
//				output.WriteLine("dbCommand.Parameters.Add(\"@TableName\", OleDbType.VarChar);");
//				output.WriteLine("dbCommand.Parameters[\"@TableName\"].Value = {0}.tableName;", ___classObject.PrivateName);
				output.WriteLine("dbCommand.CommandText = dbCommand.CommandText.Replace(\"" + sprocPrefix + "TableName\", {0}.tableName);", _modelClass.PrivateName);
				output.WriteLine();
			}

			if(_modelClass.IsModifyDateEnabled)
			{
				output.WriteLine("// Set Modify Date to Now");
				output.WriteLine("<.c>.ModifyDate = DateTime.Now.ToUniversalTime();");
				output.WriteLine();
			}

            output.WriteLine("fillParameters(dbCommand, {0});", _modelClass.PrivateName);
            output.WriteLine();

    		// Output ID Parameter
            output.WriteLine("dbCommand.Parameters.Add(\"" + 
                sprocPrefix + "{0}ID\", OleDbType.Integer).Value = " +
                "{1}.iD;", _modelClass.Name, _modelClass.PrivateName);

            // Fully Optimistic Concurrency Check
            if (_modelClass.Concurrency == ConcurrencyType.OptimisticFull)
            {
                output.WriteLine("dbCommand.Parameters.Add(\"" + 
                    sprocPrefix + "OptimisticModifyDate\", OleDbType.Date).Value " +
                    "= {0}.ModifyDate;", _modelClass.PrivateName);
            }
			
			output.WriteLine("dbConnection.Open();");
            output.WriteLine();

            output.WriteLine("// Abandon remaining updates if no rows have " +
                "been updated by returning false immediately.");
			output.WriteLine("if (dbCommand.ExecuteNonQuery() == 0) return -1;");
			
			// Update children array relationships, not the actual objects
            foreach (ReferenceField c in _modelClass.ReferenceFields)
            {
                if (c.HasChildrenTables)
                {
                    output.WriteLine();
                    output.WriteLine("if({0}.{1} != null)", 
                        _modelClass.PrivateName, c.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;

                    // NOTE! ITEMS SHOULD BE SAVED WITH VALID ID'S BEFORE THIS OCCURS!
                    // Call the save method on the object if the object is not saved.
                    // Think of somehow throwing an exception for objects in the array that
                    // do not have an id, perhaps this is not so easy.

                    output.WriteLine();
                    // Delete existing rows.
                    output.WriteLine("// Delete child relationships for {0}.", 
                        c.Name);
                    if (c.ReferenceType.ParentClassEntry.PrivateName != 
                        _modelClass.PrivateName)
                    {
                        output.WriteLine("dbCommand.CommandText = \"DELETE " +
                            "* FROM {0}Children_{1} WHERE {2}ID=" + 
                            sprocPrefix + "{2}ID;\";",
                            _modelClass.DefaultTableName, 
                            c.Name, 
                            _modelClass.Name);
                        output.WriteLine("dbCommand.Parameters.Clear();");
                        output.WriteLine("dbCommand.Parameters.Add(\"" + 
                            sprocPrefix + "{0}ID\", OleDbType.Integer).Value " +
                            "= {1}.iD;", 
                            _modelClass.Name, 
                            _modelClass.PrivateName);
                        output.WriteLine("dbCommand.ExecuteNonQuery();");
                        output.WriteLine();

                        // Insert updated rows.
                        output.WriteLine("// Save child relationships for {0}.", 
                            c.Name);
                        output.Write("dbCommand.CommandText = \"INSERT " + 
                            "INTO {0}Children_{1} ", 
                            _modelClass.DefaultTableName, 
                            c.Name);
                        output.WriteLine("({0}ID, {1}ID) VALUES (" + 
                            sprocPrefix + "{0}ID, " + sprocPrefix + 
                            "{1}ID);\";",
                            _modelClass.Name, 
                            c.ReferenceType.Name);
                        output.WriteLine("dbCommand.Parameters.Add(\"" + 
                            sprocPrefix + "{0}ID\", OleDbType.Integer);", 
                            c.ReferenceType.Name);

                        output.WriteLine("foreach({0} {1} in {2}.{3})", 
                            c.ReferenceType.Name, 
                            c.ReferenceType.ParentClassEntry.PrivateName, 
                            _modelClass.PrivateName, 
                            c.PrivateName);
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("dbCommand.Parameters[\"" + 
                            sprocPrefix + "{0}ID\"].Value = {1}.ID;", 
                            c.ReferenceType.Name, 
                            c.ReferenceType.ParentClassEntry.PrivateName);
                        output.WriteLine("dbCommand.ExecuteNonQuery();");
                        output.Indent--;
                        output.WriteLine("}");
                    }
                    else
                    {
                        output.WriteLine("dbCommand.CommandText = \"DELETE " +
                            "* FROM {0}Children_{1} WHERE {2}ID=" + 
                            sprocPrefix + "{2}ID;\";",
                            _modelClass.DefaultTableName,
                            c.Name, 
                            _modelClass.Name);
                        output.WriteLine("dbCommand.Parameters.Clear();");
                        output.WriteLine("dbCommand.Parameters.Add(\"" + 
                            sprocPrefix + "{0}ID\", OleDbType.Integer).Value " +
                            "= {1}.iD;", 
                            _modelClass.Name, 
                            _modelClass.PrivateName);
                        output.WriteLine("dbCommand.ExecuteNonQuery();");
                        output.WriteLine();
                        // Insert updated rows.
                        output.WriteLine("// Save child relationships for {0}.", 
                            c.Name);
                        output.Write("dbCommand.CommandText = \"INSERT " +
                            "INTO {0}Children_{1} ", 
                            _modelClass.DefaultTableName, 
                            c.Name);
                        output.WriteLine("({0}ID, {1}ChildID) VALUES (" + 
                            sprocPrefix + "{0}ID, " + 
                            sprocPrefix + "{1}ChildID);\";",
                            _modelClass.Name, c.ReferenceType.Name);
                        output.WriteLine("dbCommand.Parameters.Add(\"" + 
                            sprocPrefix + "{0}ChildID\", OleDbType.Integer);", 
                            c.ReferenceType.Name);

                        output.WriteLine("foreach({0} child{1} in {2}.{3})", 
                            c.ReferenceType.Name, 
                            c.ReferenceType.ParentClassEntry.Name, 
                            _modelClass.PrivateName, 
                            c.PrivateName);
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("dbCommand.Parameters[\"" + 
                            sprocPrefix + "{0}ChildID\"].Value = " +
                            "child{1}.ID;", 
                            c.ReferenceType.Name, 
                            c.ReferenceType.ParentClassEntry.Name);
                        output.WriteLine("dbCommand.ExecuteNonQuery();");
                        output.Indent--;
                        output.WriteLine("}");
                    }

                    output.Indent--;
                    output.WriteLine("}");
                }
            }

			output.WriteLine();
			output.WriteLine("dbConnection.Close();");
			
			// Add item to cache
			if(_modelClass.IsCachingEnabled)
			{
                output.WriteLine();
				output.WriteLine("// Store <.c> in cache.");
				output.WriteLine("if (cacheEnabled) cacheStore(<.c>);");
			}

			if(_modelClass.IsCollectionCachingEnabled)
			{
				output.WriteLine("// ************************* WARNING **************************** ");
				output.WriteLine("// Update operations must invalidate the cached collections.");
				output.WriteLine("// Invalidation MUST invalidate any foreign cached collections that ");
				output.WriteLine("// with children objects this manager provides or else the foreign ");
				output.WriteLine("// caches retain invalidated and potentially corrupt data! ");
				output.WriteLine("// NOTE:");
				output.WriteLine("// NitroCast only allows collection caching on objects that do not ");
				output.WriteLine("// have any children objects to minimize potential corruption. ");
                output.WriteLine("// ************************* WARNING **************************** ");
                output.WriteLine();
				output.WriteLine("invalidateCachedCollections();");
			}

            output.WriteLine();
            output.WriteLine("return {0}.iD;", _modelClass.PrivateName);

			// End Update Method Declaration
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

            #region FillParameters

            output.WriteLine("#region Default NitroCast Fill Parameters Method");
            output.WriteLine();

            output.WriteLine("private static void fillParameters(OleDbCommand command, {0} {1})", _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine("{");
            output.Indent++;

            //
            // Output Stored Proc Parameter Collection
            //
            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (folder.Items.Count > 0)
                {
                    output.WriteLine("#region " + folder.Name);
                    output.WriteLine();

                    foreach (object item in folder.Items)
                    {
                        output.WriteParameterLines(_modelClass.PrivateName, item, "command", false, sprocPrefix);
                    }

                    output.WriteLine("#endregion");
                    output.WriteLine();
                }
            }

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();
            output.WriteLine("#endregion");
            output.WriteLine();
            #endregion

            #region Fill

            output.WriteLine("#region Default NitroCast Fill Method");
			output.WriteLine();

			// Write Fill Method

			int rCount = -1;				// Use a counter to track reader indexes for objects.

			output.WriteLine("internal static bool _fill({0} {1})", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;

			// TODO: Make deepclones instead of shallow ones.
			// Add item to cache
			if(_modelClass.IsCachingEnabled)
			{
				output.WriteLine("// Clone item from cache.");
				output.WriteLine("if(cacheEnabled)");
				output.WriteLine("{");
				output.Indent++;
				if(_modelClass.IsTableCoded)
					output.WriteLine("<.C> cached<.C> = cacheFind(<.c>.iD);");
				else
					output.WriteLine("<.C> cached<.C> = cacheFind(<.c>.iD, <.c>.tableName);");
				output.WriteLine("if(cached<.C> != null)");
				output.WriteLine("{");
				output.WriteLine("cached<.C>.CopyTo(<.c>, true);");
				output.WriteLine("return <.c>.isSynced;");
				output.WriteLine("}");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}
			
			output.WriteLine("StringBuilder query = new StringBuilder(\"SELECT \");");
			output.WriteLine("query.Append(string.Join(\",\", InnerJoinFields));");

			if(_modelClass.IsTableCoded)
			{
				output.WriteLine("query.Append(\" FROM {0} WHERE {1}ID=\");", 
					_modelClass.DefaultTableName, _modelClass.Name);
			}
			else
			{
				output.WriteLine("query.Append(\" FROM \");");
				output.WriteLine("query.Append({0}.tableName);", _modelClass.PrivateName);
				output.WriteLine("query.Append(\" WHERE {0}ID=\");", _modelClass.Name);
			}			
			
			output.WriteLine("query.Append({0}.iD);", _modelClass.PrivateName);
			output.WriteLine("query.Append(\";\");");
			output.WriteLine();

			output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);",
				_modelClass.PrivateName);
			output.WriteLine("OleDbCommand dbCommand = new OleDbCommand(query.ToString(), dbConnection);");
			output.WriteLine("dbConnection.Open();");
			output.WriteLine("OleDbDataReader r = dbCommand.ExecuteReader(CommandBehavior.SingleRow);");
			output.WriteLine();
			
			output.WriteLine("if(!r.Read())");
			output.Indent++;
			output.Write("throw(new Exception(string.Format(\"Cannot find {0}ID ", _modelClass.Name);
			output.WriteLine("'{0}'.\", ");
			output.Indent++;
			output.WriteLine("{0}.iD)));", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine();

			output.Indent--;

			// Create new object...
			if(_modelClass.IsTableCoded)
				output.WriteLine("FillFromReader({0}, r, 0, 1);", _modelClass.PrivateName);
			else
				output.WriteLine("FillFromReader({0}, {0}.tableName, r, 0, 1);", _modelClass.PrivateName);

			output.WriteLine();

			// End Fill Method Declaration
			output.WriteLine("r.Close();");
			output.WriteLine("dbConnection.Close();");

			// Add item to cache
			if(_modelClass.IsCachingEnabled)
			{
				output.WriteLine("// Store <.c> in cache.");
				output.WriteLine("if(cacheEnabled) cacheStore(<.c>);");
			}

			output.WriteLine("return true;");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

            #region Get (UNUSED - USE IN NEW VERSION TO REPLACE INSTANTIATION LOADING!!!)

            //if(___classObject.IsTableCoded)
            //{
            //    output.WriteLine("public static Get{0}(string connectionString, int ID)");
            //}
            //else
            //{
            //    output.WriteLine("public static Get{0}(string connectionString, string table, int ID)");
            //}

            //output.WriteLine("{");
            //output.Indent++;

            //if (___classObject.IsTableCoded)
            //{
            //    output.WriteLine("{0} temp = new {0}(connectionString);");
            //}
            //else
            //{
            //    output.WriteLine("{0} temp = new {0}(connectionString, tableName);");
            //}

            //output.WriteLine("temp.ID = ID;");
            //output.WriteLine("_fill(temp);");
            //output.WriteLine("return temp;");
            
            //output.Indent--;
            //output.WriteLine("}");
            //output.WriteLine();

            #endregion

            #region GetCollection

            bool useCache = false;
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				useCache |= c.EnableCache;

				foreach(ReferenceField subChild in c.ReferenceType.ParentClassEntry.ReferenceFields)
					useCache |= subChild.EnableCache;

				if(useCache)
					break;
			}

			output.WriteLine("#region Default NitroCast GetCollection Method");
			output.WriteLine();

			if(_modelClass.ReferenceFields.LastOneToManyRelation != -1)
			{
				output.WriteLine("public <.C>Collection GetCollection(string whereClause, string sortClause, params <.C>Flags[] optionFlags)");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("return GetCollection(0, whereClause, sortClause, optionFlags);");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();

				output.WriteLine("public <.C>Collection GetCollection(int topCount, string whereClause, string sortClause, params <.C>Flags[] optionFlags)");
			}
			else
			{
				output.WriteLine("public <.C>Collection GetCollection(string whereClause, string sortClause)");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("return GetCollection(0, whereClause, sortClause);");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();

				output.WriteLine("public <.C>Collection GetCollection(int topCount, string whereClause, string sortClause)");
			}
			output.WriteLine("{");
			output.Indent++;

			#region Caching Code
			
			if(useCache)
				output.WriteLine("int cacheId = 0;");

			if(_modelClass.IsCollectionCachingEnabled)
			{
				if(!_modelClass.IsTableCoded)
				{
					output.WriteLine("int hashCode = topCount.GetHashCode() + ");
					output.WriteLine("\twhereClause.GetHashCode() +");
					output.WriteLine("\tsortClause.GetHashCode() +");
					output.WriteLine("\ttableName.GetHashCode() +");
				}
				else
					output.WriteLine("int hashCode = topCount.GetHashCode() + whereClause.GetHashCode() + sortClause.GetHashCode();");

				output.WriteLine("\tstring hashKey = \"__{0}_\" + hashCode.ToString();", _modelClass.Name);
				output.WriteLine();
				output.WriteLine("if(HttpContext.Current.Cache[hashKey] != null)");
				output.WriteLine("\treturn ({0}Collection) HttpContext.Current.Cache[hashKey];", _modelClass.Name);
				output.WriteLine();
			}

			#endregion

			#region SQL Command Generator

            output.WriteLine("StringBuilder query;");
            output.WriteLine(LineDependency.Children, "int innerJoinOffset;");
            output.WriteLine();

			output.WriteLine("query = new StringBuilder(\"SELECT \");", _modelClass.DefaultTableName, _modelClass.Name);
            output.WriteLine();
			
            output.WriteLine("if(topCount > 0)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("query.Append(\"TOP \");");
			output.WriteLine("query.Append(topCount);");
			output.WriteLine("query.Append(\" \");");
			output.Indent--;
			output.WriteLine("}");
            output.WriteLine();

			output.WriteLine("foreach(string columnName in InnerJoinFields)");
			output.WriteLine("{");
			output.Indent++;
            if (_modelClass.IsTableCoded)
            {
                if (_modelClass.SimpleQueryEnabled)
                {
                    output.WriteLine("query.Append(\"{0}.\");", _modelClass.Name);
                }
                else
                {
                    output.WriteLine("query.Append(\"{0}.\");", _modelClass.DefaultTableName);
                }
            }
            else
            {
                if (_modelClass.SimpleQueryEnabled)
                {
                    output.WriteLine("query.Append(\"{0}.\");", _modelClass.Name);
                }
                else
                {
                    output.WriteLine("query.Append(tableName);");
                    output.WriteLine("query.Append('.');");
                }                
            }
			output.WriteLine("query.Append(columnName);");
			output.WriteLine("query.Append(\",\");");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			//
			// Add
			//
			if(_modelClass.ReferenceFields.LastOneToManyRelation != -1)
			{
				// TODO: Link children tables of like datatypes together in the same cache.

				output.WriteLine("innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;");
				foreach(ReferenceField c in _modelClass.ReferenceFields)
				{
					// This is obvious, cannot join this at all.
					if(c.HasChildrenTables)
						continue;

					// Skip children without coded tables which is not possible with SQL. This would
					// require that SQL inner joins the child's table dynamically and join on the
					// child's id from those tables as well. This is quite messy, so just skip it.
					if(!c.IsTableCoded)
						continue;

					output.WriteLine("int {0}Offset = -1;", c.PrivateName);
					
					// Do not setup cache object for unique children
					if(c.EnableCache)
						output.WriteLine("{0}IndexedList {1}Cache = new {0}IndexedList();",
							c.ReferenceType.Name, c.PrivateName, c.ReferenceType.Name);
					
					foreach(ReferenceField subChild in c.ReferenceType.ParentClassEntry.ReferenceFields)
					{
						if(subChild.HasChildrenTables)
							continue;
						output.WriteLine("int {0}{1}Offset = -1;", c.PrivateName, subChild.Name);
	
						// Do not setup cache object for subchildren that are unique
						if(subChild.EnableCache)
							output.WriteLine("{0}IndexedList {1}{2}Cache = new {0}IndexedList();",
								subChild.ReferenceType.Name, c.PrivateName, subChild.Name);
					}
				}
				output.WriteLine();
                
                //
				// Output INNER JOIN Expressions
				//
				output.WriteLine("//");
				output.WriteLine("// Append Option Flag Fields");
				output.WriteLine("//");
				output.WriteLine("if(optionFlags != null)");
				output.Indent++;
				output.WriteLine("for(int x = 0; x < optionFlags.Length; x++)");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("switch(optionFlags[x])");
				output.WriteLine("{");
				output.Indent++;
				foreach(ReferenceField c in _modelClass.ReferenceFields)
				{
					// This is obvious, cannot join this at all.
					if(c.HasChildrenTables)
						continue;

					// Skip children without coded tables which is not possible with SQL. This would
					// require that SQL inner joins the child's table dynamically and join on the
					// child's id from those tables as well. This is quite messy, so just skip it.
					if(!c.IsTableCoded)
						continue;

					output.WriteLine("case <.C>Flags.{0}:", c.Name);
					output.Indent++;

					output.WriteLine("for(int i = 0; i <= {0}Manager.InnerJoinFields.GetUpperBound(0); i++)", c.ReferenceType.Name);
					output.WriteLine("{");
					output.Indent++;

                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\"{0}.\");", c.Name);
                    }
                    else
                    {
                        output.WriteLine("query.Append(\"{0}.\");", c.TableName);
                    }

					output.WriteLine("query.Append({0}Manager.InnerJoinFields[i]);", c.ReferenceType.Name);
					output.WriteLine("query.Append(\",\");");
					output.Indent--;
					output.WriteLine("}");

					output.WriteLine("{0}Offset = innerJoinOffset;", c.PrivateName);
					output.WriteLine("innerJoinOffset = {0}Offset + " +
                        "{1}Manager.InnerJoinFields.GetUpperBound(0) + 1;", 
						c.PrivateName, c.ReferenceType.Name);

					output.WriteLine("break;");
					output.Indent--;

					foreach(ReferenceField subChild in c.ReferenceType.ParentClassEntry.ReferenceFields)
					{
						if(subChild.HasChildrenTables)
							continue;
						output.WriteLine("case <.C>Flags.{0}{1}:", c.Name, subChild.Name);
						output.Indent++;
						
						if(subChild.IsTableCoded)
						{
							output.WriteLine("for(int i = 0; " +
                                "i <= {0}Manager.InnerJoinFields.GetUpperBound(0); " +
                                "i++)", 
                                subChild.ReferenceType.Name);
							output.WriteLine("{");
							output.Indent++;
                            
                            if (_modelClass.SimpleQueryEnabled)
                            {
                                output.WriteLine("query.Append(\"{0}_{1}.\");", 
                                    c.Name, subChild.Name);
                            }
                            else
                            {
                                output.WriteLine("query.Append(\"{0}.", 
                                    subChild.TableName);
                            }

							output.WriteLine("query.Append({0}Manager.InnerJoinFields[i]);", 
                                subChild.ReferenceType.Name);
							output.WriteLine("query.Append(\",\");");
							output.Indent--;
							output.WriteLine("}");

							output.WriteLine("{0}{1}Offset = innerJoinOffset;", 
                                c.PrivateName, subChild.Name);
							output.WriteLine("innerJoinOffset = " +
                                "{0}{1}Offset + " +
                                "{2}Manager.InnerJoinFields.GetUpperBound(0) " +
                                "+ 1;", 
								c.PrivateName, subChild.Name, subChild.ReferenceType.Name);
						}

						output.WriteLine("break;");
						output.Indent--;

					}
				}
								
				output.Indent--;
				output.WriteLine("}");

				output.Indent--;
				output.WriteLine("}");

				output.Indent--;
				output.WriteLine();
			}
            
			//
			// Remove Last Comma!
			//
			output.WriteLine("//");
			output.WriteLine("// Remove trailing comma");
			output.WriteLine("//");
			output.WriteLine("query.Length--;"); 

			//
			// Add the option flags code for objects that have relations
			//
			if(_modelClass.ReferenceFields.LastOneToManyRelation != -1)
			{
				output.WriteLine("if(optionFlags != null)");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("query.Append(\" FROM \");");
				output.WriteLine();

				//
				// Start INNER JOIN expressions
				//
				output.WriteLine("//");
				output.WriteLine("// Start INNER JOIN expressions");
				output.WriteLine("//");
				output.WriteLine("for(int x = 0; x < optionFlags.Length; x++)");
				output.Indent++;
				output.WriteLine("query.Append(\"(\");");
				output.Indent--;
				output.WriteLine();

				//
				// Output PRIMARY TABLE
				// 
                if (_modelClass.IsTableCoded)
                {
                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\"{0} AS {1}\");", 
                            _modelClass.DefaultTableName, _modelClass.Name);
                    }
                    else
                    {
                        output.WriteLine("query.Append(\"{0}\");", 
                            _modelClass.DefaultTableName);
                    }
                }
                else
                {
                    output.WriteLine("query.Append(tableName);");
                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\" AS {0}\");", 
                            _modelClass.Name);
                    }
                }
				
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine("else");
				output.WriteLine("{");
				output.Indent++;
                if (_modelClass.IsTableCoded)
                {
                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\" FROM {0} AS {1}\");", 
                            _modelClass.DefaultTableName,
                            _modelClass.Name);
                    }
                    else
                    {
                        output.WriteLine("query.Append(\" FROM {0} \");", 
                            _modelClass.DefaultTableName);
                    }
                }
                else
                {
                    output.WriteLine("query.Append(\" FROM \");");
                    output.WriteLine("query.Append(tableName);");
                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\" AS {0}\");", 
                            _modelClass.Name);
                    }
                }
				output.Indent--;
				output.WriteLine("}");
			}
			else
			{
                if (_modelClass.IsTableCoded)
                {
                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\" FROM {0} AS {1}\");", _modelClass.DefaultTableName,
                            _modelClass.Name);
                    }
                    else
                    {
                        output.WriteLine("query.Append(\" FROM {0} \");", _modelClass.DefaultTableName);
                    }
                }
                else
                {
                    output.WriteLine("query.Append(\" FROM \");");
                    output.WriteLine("query.Append(tableName);");
                    if (_modelClass.SimpleQueryEnabled)
                    {
                        output.WriteLine("query.Append(\" AS {0}\");", _modelClass.Name);
                    }
                }
			}

			if(_modelClass.ReferenceFields.LastOneToManyRelation != -1)
			{
				//
				// Output INNER JOIN Expressions
				//
				output.WriteLine("//");
				output.WriteLine("// Finish INNER JOIN expressions");
				output.WriteLine("//");
				output.WriteLine("if(optionFlags != null)");
				output.Indent++;
				output.WriteLine("for(int x = 0; x < optionFlags.Length; x++)");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("switch(optionFlags[x])");
				output.WriteLine("{");
				output.Indent++;
				foreach(ReferenceField c in _modelClass.ReferenceFields)
				{
					// This is obvious, cannot join this at all.
					if(c.HasChildrenTables)
						continue;

					// Skip children without coded tables which is not possible 
                    // with SQL. This would require that SQL inner joins the 
                    // child's table dynamically and join on the child's id from 
                    // those tables as well. This is quite messy, so just skip 
                    // it.
					if(!c.IsTableCoded)
						continue;

					output.WriteLine("case <.C>Flags.{0}:", c.Name);
					output.Indent++;

					if(_modelClass.IsTableCoded & c.IsTableCoded)
					{
                        if (_modelClass.SimpleQueryEnabled)
                        {
                            output.WriteLine("query.Append(\" LEFT JOIN " + 
                                "{0} AS {1} ON {2}.{3}ID = {1}.{4}ID)\");",
                                c.TableName, c.Name, _modelClass.Name, 
                                c.Name, c.ReferenceType.Name);
                        }
                        else
                        {
                            output.WriteLine("query.Append(\" LEFT JOIN " +
                                "{0} ON {1}.{2}ID = {0}.{3}ID)\");",
                                c.TableName, _modelClass.DefaultTableName, 
                                c.Name, c.ReferenceType.Name);
                        }
					}
					else if(!_modelClass.IsTableCoded & c.IsTableCoded)
					{
						output.WriteLine("query.Append(\" LEFT JOIN {0} ON \");",
							c.TableName);

                        if (_modelClass.SimpleQueryEnabled)
                        {
                            output.WriteLine("query.Append(tableName);");
                            output.WriteLine("query.Append(\" AS {0}\");", 
                                _modelClass.Name);
                            output.WriteLine("query.Append(\".{0}ID = {1}.ID)\");",
                                c.Name, _modelClass.Name);
                        }
                        else
                        {
                            output.WriteLine("query.Append(tableName);");
                            output.WriteLine("query.Append(\".{0}ID = {1}.{2}ID)\");",
                            c.Name, c.TableName, c.ReferenceType.Name);
                        }
						
					}
					else if(_modelClass.IsTableCoded & !c.IsTableCoded)
					{
						// TODO: Finish This!
					}

					output.WriteLine("break;");
					output.Indent--;

					// 
					// Apppend SubChildren Options
					//
					foreach(ReferenceField subChild in 
                        c.ReferenceType.ParentClassEntry.ReferenceFields)
					{
						// This is obvious, cannot join this at all.
						if(subChild.HasChildrenTables)
							continue;

						if(!subChild.IsTableCoded)
							continue;

						output.WriteLine("case <.C>Flags.{0}{1}:", 
                            c.Name, subChild.Name);

						output.Indent++;

						if(c.IsTableCoded & subChild.IsTableCoded)
						{
                            if (_modelClass.SimpleQueryEnabled)
                            {
                                output.WriteLine("query.Append(\" LEFT JOIN " + 
                                    "{0} AS {1}_{3} ON {2}.{3}ID = " +
                                    "{1}_{3}.{4}ID)\");",
                                    subChild.TableName, c.Name, c.Name, 
                                    subChild.Name, subChild.ReferenceType.Name);
                            }
                            else
                            {
                                output.WriteLine("query.Append(\" LEFT JOIN " +
                                    "{0} ON {1}.{2}ID = " +
                                    "{0}.{3}ID)\");",
                                    subChild.TableName, c.TableName, 
                                    subChild.Name, subChild.ReferenceType.Name);
                            }
						}
						else if(!c.IsTableCoded & subChild.IsTableCoded)
						{
							output.WriteLine("query.Append(\" LEFT JOIN " +
                                "{0} ON \");",
								subChild.TableName);
							output.WriteLine("query.Append(tableName);");
							output.WriteLine("query.Append(\".{0}ID = " +
                                "{1}.{2}ID)\");",
								subChild.Name, subChild.TableName, 
                                subChild.ReferenceType.Name);
						}
						else if(c.IsTableCoded & !subChild.IsTableCoded)
						{
							// TODO: Finish This!
						}

						output.WriteLine("break;");
						output.Indent--;
					}					
				}
								
				output.Indent--;
				output.WriteLine("}");

				output.Indent--;
				output.WriteLine("}");

				output.Indent--;
				output.WriteLine();
			}

			output.WriteLine("//");
			output.WriteLine("// Render where clause");
			output.WriteLine("//");
			output.WriteLine("if(whereClause != string.Empty)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("query.Append(\" WHERE \");", _modelClass.Name);
			output.WriteLine("query.Append(whereClause);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("//");
			output.WriteLine("// Render sort clause ");
			output.WriteLine("//");
			output.WriteLine("if(sortClause != string.Empty)");
			output.WriteLine("{");
			output.Indent++;			
			output.WriteLine("query.Append(\" ORDER BY \");");
			output.WriteLine("query.Append(sortClause);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("//");
			output.WriteLine("// Render final semicolon");
			output.WriteLine("//");
			output.WriteLine("query.Append(\";\");");

			#endregion

			output.WriteLine("OleDbConnection dbConnection = " +
                "new OleDbConnection(connectionString);");
			output.WriteLine("OleDbCommand dbCommand = " +
                "new OleDbCommand(query.ToString(), dbConnection);");
			output.WriteLine("dbConnection.Open();");
            output.WriteLine();

            output.WriteLine("#if DEBUG");
            output.WriteLine("OleDbDataReader r;");
            output.WriteLine("try");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("r = dbCommand.ExecuteReader();");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("catch (Exception e)");
            output.WriteLine("{");
            output.Indent++;
            
            // ================================================================
            // Super Access Debug!
            // ================================================================
            output.WriteLine("string msg = e.Message;");
            output.WriteLine("throw(new Exception(msg + \" --- Query: \" + " +
                "query.ToString()));");
            output.WriteLine();

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("#else");
			output.WriteLine("OleDbDataReader r = dbCommand.ExecuteReader();");
            output.WriteLine("#endif");
            output.WriteLine();

			output.WriteLine("{0}Collection {1}Collection = new {0}Collection();", 
                _modelClass.Name, _modelClass.PrivateName);
            output.WriteLine();
			output.WriteLine("while(r.Read())");
			output.WriteLine("{");
			output.Indent++;

			//
			// Create new object...
			//
			if(_modelClass.IsTableCoded)
				output.WriteLine("{0} {1} = ParseFromReader(r, 0, 1);", 
                    _modelClass.Name, _modelClass.PrivateName);
			else
				output.WriteLine("{0} {1} = ParseFromReader(tableName, " +
                    "r, 0, 1);", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine();

			rCount = 0;

			//===============================================
			
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				// This is obvious, cannot join this at all.
				if(c.HasChildrenTables)
					continue;

				// Skip children without coded tables which is not possible 
                // with SQL. This would require that SQL inner joins the child's
                // table dynamically and join on the child's id from those tables 
                // as well. This is quite messy, so just skip it.

				if(!c.IsTableCoded)
					continue;

				rCount++;

				output.WriteLine("// Fill {0}", c.Name);
				output.WriteLine("if({0}Offset != -1 && !r.IsDBNull({0}Offset))", 
                    c.PrivateName, _modelClass.PrivateName, c.PrivateName);

				if(c.ReferenceType.ParentClassEntry.ReferenceFields.Count != 0)
					output.WriteLine("{");
				output.Indent++;
											
				//
				// Search cache for child object.
				//
				if(c.EnableCache)
				{					
					output.WriteLine("cacheId = {0}Cache.IndexOf(r.GetInt32({0}Offset));", 
                        c.PrivateName, _modelClass.PrivateName, c.Name);
					output.WriteLine("if(cacheId != -1)");
					output.Indent++;
					output.WriteLine("{0}.{1} = {1}Cache[cacheId];", 
                        _modelClass.PrivateName, c.PrivateName);
					output.Indent--;
					output.WriteLine("else");
					output.WriteLine("{");
					output.Indent++;
				}

                if (c.ReferenceType.IsTableCoded)
                {
                    output.WriteLine("{2}Manager.FillFromReader({0}.{1}, " +
                        "r, {1}Offset, {1}Offset+1);",
                        _modelClass.PrivateName, c.PrivateName,
                        c.ReferenceType.Name);
                }
                else if (c.IsTableCoded)
                {
                    output.WriteLine("{2}Manager.FillFromReader({0}.{1}, " +
                        "\"{3}\", r, {1}Offset, {1}Offset+1);",
                        _modelClass.PrivateName, c.PrivateName,
                        c.ReferenceType.Name, c.TableName);
                }

                if (c.ReferenceType.ParentClassEntry.ReferenceFields.Count != 0)
                {
                    output.WriteLine();
                }

				foreach(ReferenceField subChild in 
                    c.ReferenceType.ParentClassEntry.ReferenceFields)
				{
					if(subChild.HasChildrenTables)
						continue;

					output.WriteLine("// Fill {0}", subChild.Caption);
                    output.WriteLine("if({0}{1}Offset != -1 && " +
                        "!r.IsDBNull({0}{1}Offset))", 
                        c.PrivateName, subChild.Name, _modelClass.PrivateName);
									
					//
					// Search cache for child object.
					//
                    if (subChild.EnableCache)
                    {
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("cacheId = " +
                            "{0}{1}Cache.IndexOf(r.GetInt32({0}{1}Offset));", 
                            c.PrivateName, subChild.Name);
                        output.WriteLine("if(cacheId != -1)", 
                            c.PrivateName, subChild.Name);
                        output.Indent++;
                        output.WriteLine("{0}.{1}.{2} = {1}{2}Cache[cacheId];", 
                            _modelClass.PrivateName, c.PrivateName, 
                            subChild.Name);
                        output.Indent--;
                        output.WriteLine("else");
                        output.WriteLine("{");
                        output.Indent++;
                    }
                    else
                    {
                        output.Indent++;
                    }

                    if (subChild.ReferenceType.IsTableCoded)
                    {
                        output.WriteLine("{3}Manager.FillFromReader({0}.{1}.{2}, " +
                            "r, {1}{2}Offset, {1}{2}Offset+1);",
                            _modelClass.PrivateName,
                            c.PrivateName,
                            subChild.Name,
                            subChild.ReferenceType.Name);
                    }
                    else if (subChild.IsTableCoded)
                    {
                        output.WriteLine("{4}Manager.FillFromReader({0}.{1}.{2}, " +
                            "\"{3}\", r, {1}{2}Offset, {1}{2}Offset+1);",
                            _modelClass.PrivateName,
                            c.PrivateName,
                            subChild.Name,
                            subChild.TableName,
                            subChild.ReferenceType.Name);
                    }

					if(subChild.EnableCache)
					{
						output.WriteLine("{0}{1}Cache.Add({2}.{0}.{1});", 
                            c.PrivateName, subChild.Name, 
                            _modelClass.PrivateName);
						output.Indent--;
						output.WriteLine("}");
						
						output.Indent--;
						output.WriteLine("}");
					}
					else
						output.Indent--;

					output.WriteLine();
				}
				
				if(c.EnableCache)
				{
					output.WriteLine("{0}Cache.Add({1}.{2});", c.PrivateName, 
                        _modelClass.PrivateName,
						c.PrivateName);

					output.Indent--;
					output.WriteLine("}");
				}

				output.Indent--;
				if(c.ReferenceType.ParentClassEntry.ReferenceFields.Count != 0)
					output.WriteLine("}");

				output.WriteLine();
			}

			if(_modelClass.IsTableCoded)
				output.WriteLine("{0}Collection.Add({0});", 
                    _modelClass.PrivateName);
			else
				output.WriteLine("{0}Collection.Add({0});", 
                    _modelClass.PrivateName);

			// TODO: Write code to parse child objects into instantiated Class 
            // instead of using PlaceHolder objects.

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();
			output.WriteLine("r.Close();");
			output.WriteLine("dbConnection.Close();");
			output.WriteLine();

            if (_modelClass.IsCollectionCachingEnabled)
            {
                output.WriteLine("HttpContext.Current.Cache.Insert(hashKey, " +
                    "<.c>Collection, null, DateTime.MaxValue, " +
                    "TimeSpan.FromSeconds({0}), CacheItemPriority.Normal, null);",
                    _modelClass.CacheLifetime.TotalSeconds);
            }

			output.WriteLine("return {0}Collection;", _modelClass.PrivateName);
			
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Parse From Reader Methods

			output.WriteLine("#region Default NitroCast ParseFromReader Method");
			output.WriteLine();

			if(_modelClass.IsTableCoded)
				output.WriteLine("public static {0} ParseFromReader(" +
					"OleDbDataReader r, int idOffset, int dataOffset)", _modelClass.Name);
			else
				output.WriteLine("public static {0} ParseFromReader(string tableName," +
					"OleDbDataReader r, int idOffset, int dataOffset)", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;

			//
			// Create new object...
			//
			if(_modelClass.IsTableCoded)
			{
				output.WriteLine("{0} {1} = new {0}();", _modelClass.Name, _modelClass.PrivateName);
				output.WriteLine("FillFromReader({0}, r, idOffset, dataOffset);", _modelClass.PrivateName);
			}
			else
			{
				output.WriteLine("{0} {1} = new {0}(tableName);", _modelClass.Name, _modelClass.PrivateName);
				output.WriteLine("FillFromReader({0}, tableName, r, idOffset, dataOffset);", _modelClass.PrivateName);
			}
			
			output.WriteLine("return {0};", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Fill From Reader Methods

			output.WriteLine("#region Default NitroCast FillFromReader Method");
			output.WriteLine();

			output.WriteXmlSummary("Fills the {0} from a OleDbDataReader.");
			if(_modelClass.IsTableCoded)
				output.WriteLine("public static void FillFromReader({0} {1}, " +
					"OleDbDataReader r, int idOffset, int dataOffset)", _modelClass.Name, _modelClass.PrivateName);
			else
				output.WriteLine("public static void FillFromReader({0} {1}, string tableName," +
					"OleDbDataReader r, int idOffset, int dataOffset)", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;

			//
			// Create new object...
			//
            if (_modelClass.IsTableCoded)
            {                
            }
            else
            {             
                output.WriteLine("{0}.tableName = tableName;", _modelClass.PrivateName);
            }
			output.WriteLine("{0}.iD = r.GetInt32(idOffset);", _modelClass.PrivateName);
			output.WriteLine("{0}.isSynced = true;", _modelClass.PrivateName);
			output.WriteLine("{0}.isPlaceHolder = false;", _modelClass.PrivateName);
			output.WriteLine();

			rCount = -1;				// Use a counter to track reader indexes for objects.

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ReferenceField)
                    {
                        ReferenceField r = (ReferenceField)item;

                        if (r.HasChildrenTables)
                        {
                            continue;
                        }

                        rCount++;

                        // Be sure that the manager does not create a 
                        // placeholder for '0' or '-1'

                        output.WriteLine("if(!r.IsDBNull({0}+dataOffset) " +
                            "&& r.GetInt32({0}+dataOffset) > 0)", rCount);
                        output.WriteLine("{");
                        output.Indent++;

                        if (r.IsTableCoded)
                        {
                            // If the Child's DataType does not have coded 
                            // tables then hard code the table here.

                            if (!r.ReferenceType.IsTableCoded)
                            {
                                output.WriteLine("{0}.{1} = " +
                                    "{2}.NewPlaceHolder(\"{3}\", " +
                                    "r.GetInt32({4}+dataOffset));",
                                    _modelClass.PrivateName,
                                    r.PrivateName,
                                    r.ReferenceType.Name,
                                    r.TableName,
                                    rCount);
                            }
                            else
                            {
                                output.WriteLine("{0}.{1} = " +
                                    "{2}.NewPlaceHolder(" +
                                    "r.GetInt32({3}+dataOffset));",
                                    _modelClass.PrivateName,
                                    r.PrivateName,
                                    r.ReferenceType.Name,
                                    rCount);
                            }
                        }
                        else
                        {
                            // References with uncoded tables use two columns
                            // in the database.

                            rCount++;

                            output.WriteLine("{0}.{1} = " +
                                "{2}.NewPlaceHolder(" +
                                "r.GetString({3}+dataOffset), " +
                                "r.GetInt32({4}+dataOffset));",
                                _modelClass.PrivateName,
                                r.PrivateName,
                                r.ReferenceType.Name,
                                rCount - 1,
                                rCount);
                        }

                        output.Indent--;
                        output.WriteLine("}");
                    }
                    else if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;

                        rCount++;

                        if (f.IsNullable)
                        {
                            output.WriteLine("if(!r.IsDBNull({0}+dataOffset)) ", 
                                rCount);
                            output.Indent++;
                            output.WriteLine("{0}.{1} = {2};", 
                                _modelClass.PrivateName,
                                f.PrivateName,
                                f.ValueType.MakeReaderMethod("r", rCount, "dataOffset"));
                            output.Indent--;

                            //
                            // Set the default value or null value
                            //
                            if (f.UseDefaultValueOnNull)
                            {
                                output.WriteLine("else");
                                output.Indent++;
                                output.WriteLine("{0}.{1} = {2};", 
                                    _modelClass.PrivateName,
                                    f.PrivateName,
                                    f.DefaultValue);
                                output.Indent--;
                            }
                            else if (f.ValueType.NullValue != string.Empty)
                            {
                                output.WriteLine("else");
                                output.Indent++;
                                output.WriteLine("{0}.{1} = {2};", 
                                    _modelClass.PrivateName,
                                    f.PrivateName,
                                    f.ValueType.NullValue);
                                output.Indent--;
                            }
                        }
                        else
                        {
                            output.WriteLine("{0}.{1} = {2};", 
                                _modelClass.PrivateName,
                                f.PrivateName,
                                f.ValueType.MakeReaderMethod("r", rCount, "dataOffset"));
                        }
                    }
                    else if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;

                        rCount++;

                        output.WriteLine("{0}.{1} = ({2}){3};",
                            _modelClass.PrivateName,
                            e.PrivateName,
                            e.EnumType.Name,
                            e.EnumType.ParentEnumEntry.ValueType.MakeReaderMethod("r", rCount, "dataOffset"));
                    }
                }
            }

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Fill Children Methods

            if (_modelClass.ReferenceFields.Count > 0)
            {

                output.WriteLine("#region Default NitroCast Fill Methods");
                output.WriteLine();

                #region Object Filling

                foreach (ReferenceField c in _modelClass.ReferenceFields)
                {
                    if (!c.HasChildrenTables)
                        continue;

                    output.WriteLine("public static void Fill{0}({1} {2})", c.Name, _modelClass.Name, _modelClass.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;

                    if (_modelClass.IsTableCoded)
                    {
                        if (_modelClass.Name == c.ReferenceType.Name)
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ChildID FROM {1}Children_{2} \");",
                                c.ReferenceType.Name, _modelClass.DefaultTableName, c.ColumnName);
                        else
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ID FROM {1}Children_{2} \");",
                                c.ReferenceType.Name, _modelClass.DefaultTableName, c.ColumnName);
                    }
                    else
                    {
                        if (_modelClass.Name == c.ReferenceType.Name)
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ChildID FROM \");",
                                c.ReferenceType.Name);
                        else
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ID FROM \");",
                                c.ReferenceType.Name);
                        output.WriteLine("s.Append({0}.tableName);", _modelClass.PrivateName);
                        output.WriteLine("s.Append(\"Children_{0}\");", c.ColumnName);
                    }

                    output.WriteLine("s.Append(\"WHERE {0}ID=\");", _modelClass.Name);
                    output.WriteLine("s.Append({0}.iD);", _modelClass.PrivateName);
                    output.WriteLine("s.Append(\";\");");
                    output.WriteLine();

                    output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);", _modelClass.PrivateName);
                    output.WriteLine("OleDbCommand dbCommand = new OleDbCommand(s.ToString(), dbConnection);");
                    output.WriteLine("dbConnection.Open();");
                    output.WriteLine("OleDbDataReader r = dbCommand.ExecuteReader();");
                    output.WriteLine();
                    output.WriteLine("{0}Collection {1};", c.ReferenceType.Name, c.PrivateName);
                    output.WriteLine("if({0}.{1} != null)", _modelClass.PrivateName, c.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("{0} = {1}.{0};", c.PrivateName, _modelClass.PrivateName);
                    output.WriteLine("{0}.Clear();", c.PrivateName);
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine("else");
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("{0} = new {1}Collection();", c.PrivateName, c.ReferenceType.Name);
                    output.WriteLine("{0}.{1} = {1};", _modelClass.PrivateName, c.PrivateName);
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();

                    if (c.ReferenceMode == ReferenceMode.Array)
                    {
                        output.WriteLine("{0}[] {1}Array = new {0}[r.GetInt32(1)];", c.ReferenceType.Name, c.PrivateName);
                        output.WriteLine("int rowNum = 0;");
                        output.WriteLine("do");
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("{0}Array[rowNum] = {1}.NewPlaceHolder(r.GetInt32(0));",
                            c.PrivateName, c.ReferenceType.Name, _modelClass.PrivateName);
                        output.WriteLine("rowNum++;");
                        output.Indent--;
                        output.WriteLine("}");
                        output.WriteLine("while(r.Read());");
                        output.WriteLine();
                        output.WriteLine("dbConnection.Close();");
                        output.WriteLine("{0}.{1} = {1}Array;", _modelClass.PrivateName,
                            c.PrivateName);
                    }
                    else if (c.ReferenceMode == ReferenceMode.Collection)
                    {
                        output.WriteLine("while(r.Read())");
                        output.Indent++;
                        if (c.ReferenceType.IsTableCoded)
                            output.WriteLine("{0}.Add({1}.NewPlaceHolder(r.GetInt32(0)));",
                                c.PrivateName, c.ReferenceType.Name, _modelClass.PrivateName);
                        else if (c.IsTableCoded)
                            output.WriteLine("{0}.Add({1}.NewPlaceHolder(\"{3}\", r.GetInt32(0)));",
                                c.PrivateName, c.ReferenceType.Name, _modelClass.PrivateName, c.TableName);
                        output.Indent--;
                        output.WriteLine();
                        output.WriteLine("r.Close();");
                        output.WriteLine("dbConnection.Close();");
                        output.WriteLine("{0}.{1} = {2};", _modelClass.PrivateName,
                            c.Name, c.PrivateName);
                    }

                    // Add item to cache
                    if (_modelClass.IsCachingEnabled)
                    {
                        output.WriteLine("// Store <.C> in cache.");
                        output.WriteLine("if(cacheEnabled) cacheStore({0});", _modelClass.PrivateName);
                    }

                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();

                    #endregion

                    #region Collection Filling

                    output.WriteLine("public static void Fill{0}({1}Collection {2}Collection)", c.Name, _modelClass.Name, _modelClass.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;

                    output.WriteLine("if({0}Collection.Count > 0)", _modelClass.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;

                    if (_modelClass.IsTableCoded)
                    {
                        if (_modelClass.Name == c.ReferenceType.Name)
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ID, {1}ChildID FROM {2}Children_{3} ORDER BY {0}ID; \");",
                                _modelClass.Name, c.ReferenceType.Name, _modelClass.DefaultTableName, c.ColumnName);
                        else
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ID, {1}ID FROM {2}Children_{3} ORDER BY {0}ID; \");",
                                _modelClass.Name, c.ReferenceType.Name, _modelClass.DefaultTableName, c.ColumnName);
                    }
                    else
                    {
                        if (_modelClass.Name == c.ReferenceType.Name)
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ID, {1}ChildID FROM \");",
                                _modelClass.Name, c.ReferenceType.Name);
                        else
                            output.WriteLine("StringBuilder s = new StringBuilder(\"SELECT {0}ID, {1}ID FROM \");",
                                _modelClass.Name, c.ReferenceType.Name);
                        output.WriteLine("s.Append(_{0}.tableName);", _modelClass.Name);
                        output.WriteLine("s.Append(\"Children_{0} ORDER BY {1}ID;\");", c.ColumnName, _modelClass.Name);
                    }
                    output.WriteLine();

                    output.WriteLine("// Clone and sort collection by ID first to fill children in one pass");
                    output.WriteLine("{0}Collection clonedCollection = {1}Collection.Clone();", _modelClass.Name, _modelClass.PrivateName);
                    output.WriteLine("clonedCollection.Sort();", _modelClass.PrivateName);
                    output.WriteLine();

                    output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);", _modelClass.PrivateName);
                    output.WriteLine("OleDbCommand dbCommand = new OleDbCommand(s.ToString(), dbConnection);");
                    output.WriteLine("dbConnection.Open();");
                    output.WriteLine("OleDbDataReader r = dbCommand.ExecuteReader();");
                    output.WriteLine();
                    output.WriteLine("bool more = r.Read();");
                    output.WriteLine();
                    output.WriteLine("foreach({0} {1} in clonedCollection)", _modelClass.Name, _modelClass.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("{0}Collection {1};", c.ReferenceType.Name, c.PrivateName);
                    output.WriteLine("if({0}.{1} != null)", _modelClass.PrivateName, c.PrivateName);
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("{0} = {1}.{0};", c.PrivateName, _modelClass.PrivateName);
                    output.WriteLine("{0}.Clear();", c.PrivateName);
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine("else");
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("{0} = new {1}Collection();", c.PrivateName, c.ReferenceType.Name);
                    output.WriteLine("{0}.{1} = {1};", _modelClass.PrivateName, c.PrivateName);
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();

                    if (c.ReferenceMode == ReferenceMode.Array)
                    {
                        //output.WriteLine("{0}[] {1}Array = new {0}[r.GetInt32(1)];", c.DataType.Name, c.PrivateName);
                        //output.WriteLine("int rowNum = 0;");
                        //output.WriteLine("do");
                        //output.WriteLine("{");
                        //output.Indent++;
                        //output.WriteLine("{0}Array[rowNum] = {1}.NewPlaceHolder(_{2}.connectionString, r.GetInt32(0));",
                        //    c.PrivateName, c.DataType.Name, ___classObject.Name);
                        //output.WriteLine("rowNum++;");
                        //output.Indent--;
                        //output.WriteLine("}");
                        //output.WriteLine("while(r.Read());");
                        //output.WriteLine();
                        //output.WriteLine("dbConnection.Close();");
                        //output.WriteLine("_{0}.{1} = {1}Array;", ___classObject.Name,
                        //    c.PrivateName);
                    }
                    else if (c.ReferenceMode == ReferenceMode.Collection)
                    {
                        output.WriteLine("while(more)");
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("if(r.GetInt32(0) < {0}.iD)", _modelClass.PrivateName);
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("more = r.Read();");
                        output.Indent--;
                        output.WriteLine("}");
                        output.WriteLine("else if(r.GetInt32(0) == {0}.iD)", _modelClass.PrivateName);
                        output.WriteLine("{");
                        output.Indent++;
                        if (c.ReferenceType.IsTableCoded)
                            output.WriteLine("{0}.Add({1}.NewPlaceHolder(r.GetInt32(1)));",
                                c.PrivateName, c.ReferenceType.Name, _modelClass.PrivateName);
                        else if (c.IsTableCoded)
                            output.WriteLine("{0}.Add({1}.NewPlaceHolder(\"{3}\", r.GetInt32(1)));",
                                c.PrivateName, c.ReferenceType.Name, _modelClass.PrivateName, c.TableName);
                        output.WriteLine("more = r.Read();");
                        output.Indent--;
                        output.WriteLine("}");
                        output.WriteLine("else");
                        output.WriteLine("{");
                        output.Indent++;
                        output.WriteLine("break;");
                        output.Indent--;
                        output.WriteLine("}");
                        output.Indent--;
                        output.WriteLine("}");
                        output.WriteLine();
                        output.WriteLine("// No need to continue if there are no more records");
                        output.WriteLine("if(!more) break;");
                        output.Indent--;
                        output.WriteLine("}");
                        output.WriteLine();

                        output.WriteLine("r.Close();");
                        output.WriteLine("dbConnection.Close();");
                    }

                    //// Add item to cache
                    //if (___classObject.IsCachingEnabled)
                    //{
                    //    output.WriteLine("// Store <.C> in cache.");
                    //    output.WriteLine("if(cacheEnabled) cacheStore(_<.C>);");
                    //}

                    output.Indent--;
                    output.WriteLine("}");

                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();
                }

                output.WriteLine("#endregion");
                output.WriteLine();

                #endregion
            }

			#endregion

            #region Delete

            output.WriteLine("#region Default NitroCast Delete Method");
			output.WriteLine();

			// Write Delete Method
			if(_modelClass.IsTableCoded)
				output.WriteLine("internal static void _delete(int id)");
			else
				output.WriteLine("internal static void _delete(string tableName, int id)");
            			
			output.WriteLine("{");
			output.Indent++;
			if(_modelClass.IsTableCoded)
			{
				output.WriteLine("StringBuilder s = new StringBuilder(\"DELETE * FROM {0} WHERE {1}ID=\");", _modelClass.DefaultTableName, _modelClass.Name);
				output.WriteLine("s.Append(id);");
				output.WriteLine("s.Append(';');");
			}
			else
			{
				output.WriteLine("StringBuilder s = new StringBuilder(\"DELETE * FROM \");");
				output.WriteLine("s.Append(tableName);", _modelClass.DefaultTableName);
				output.WriteLine("s.Append(\" WHERE {0}ID=\");", _modelClass.Name);
				output.WriteLine("s.Append(id);");
				output.WriteLine("s.Append(';');");
			}

			output.WriteLine();
			output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);");
			output.WriteLine("OleDbCommand dbCommand = new OleDbCommand(s.ToString(), dbConnection);");
			output.WriteLine("dbConnection.Open();");
			output.WriteLine("dbCommand.ExecuteNonQuery();");

			// Update children array relationships, not the actual objects
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				// NOTE! ITEMS SHOULD BE SAVED WITH VALID ID'S BEFORE THIS OCCURS!
				// Call the save method on the object if the object is not saved.
				// Think of somehow throwing an exception for objects in the array that
				// do not have an id, perhaps this is not so easy.

				if(!c.HasChildrenTables)
					continue;

				output.WriteLine();		
		
				if(_modelClass.IsTableCoded)
				{
					// Delete existing rows.
					output.WriteLine("// Delete child relationships for {0}.", c.Name);
					output.WriteLine("s.Length = 0;");
					output.WriteLine("s.Append(\"DELETE * FROM {0}Children_{1} WHERE \");",
						_modelClass.DefaultTableName, c.ColumnName);
					output.WriteLine("s.Append(\"{0}ID=\");", _modelClass.Name);
					output.WriteLine("s.Append(id);", _modelClass.Name);
					output.WriteLine("s.Append(\";\");");
					output.WriteLine("dbCommand.CommandText = s.ToString();");
					output.WriteLine("dbCommand.ExecuteNonQuery();");
				}
				else
				{
					// TODO: Output code that depends on dynamic tables.
				}
			}

			output.WriteLine();
			output.WriteLine("dbConnection.Close();");
			output.WriteLine();

			if(_modelClass.IsCachingEnabled)
			{
				if(_modelClass.IsTableCoded)
					output.WriteLine("cacheRemove(id);");
				else
					output.WriteLine("cacheRemove(id, tableName);");
			}

			if(_modelClass.IsCollectionCachingEnabled)
			{
				output.WriteLine("// ************************* WARNING **************************** ");
				output.WriteLine("// Insert operations must invalidate the cached collections.");
				output.WriteLine("// Invalidation MUST invalidate any foreign cached collections that ");
				output.WriteLine("// with children objects this manager provides or else the foreign ");
				output.WriteLine("// caches retain invalidated and potentially corrupt data! ");
				output.WriteLine("// NOTE:");
				output.WriteLine("// NitroCast only allows collection caching on objects that do not ");
				output.WriteLine("// have any children objects to minimize potential corruption. ");
				output.WriteLine("invalidateCachedCollections();");
			}
			

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

            #region Verify Table

            output.WriteLine("public string VerifyTable(bool repair)");
            output.WriteLine("{");
            output.Indent++;

            output.WriteLine("OleDbConnection dbConnection;");
            output.WriteLine("OleDbCommand dbCommand;");
            output.WriteLine("bool match;");
            output.WriteLine("string[] restrictions1;");
            output.WriteLine("StringBuilder msg;");
            output.WriteLine();

            output.WriteLine("msg = new StringBuilder();");
            output.WriteLine("restrictions1 = new string[] { null, " +
               "null, tableName, null };");
            output.WriteLine();

            output.WriteLine("dbConnection = new OleDbConnection(connectionString);");            
            output.WriteLine("dbCommand = new OleDbCommand();");
            output.WriteLine("dbCommand.Connection = dbConnection;");
            output.WriteLine();

            output.WriteLine("dbConnection.Open();");
            output.WriteLine();

            output.WriteLine("System.Data.DataTable schemaTable = " +
                "dbConnection.GetSchema(\"Columns\", restrictions1);");
            output.WriteLine();

            output.WriteLine("// Loop through the join fields and columns in the");
            output.WriteLine("// table schema to find which fields are missing.");
            output.WriteLine("// Note that this search cannot use BinarySearch due");
            output.WriteLine("// to the fact that JoinFields is unsorted.");
            output.WriteLine("// A sorted JoinFields need not be used because this");
            output.WriteLine("// method should be used sparingly.");
            output.WriteLine();

            output.WriteLine("for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)");                
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("match = false;");            
            
            output.WriteLine("foreach(System.Data.DataRow row in schemaTable.Rows)");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("if(JoinFields[i,0] == row[3].ToString())");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("match = true;");
            output.WriteLine("break;");
            output.Indent--;
            output.WriteLine("}");
            output.Indent--;
            output.WriteLine("}");

            output.WriteLine("if(!match)");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("if(repair)");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("dbCommand.CommandText = \"ALTER TABLE \" + " +
                "tableName + \" ADD COLUMN \" + JoinFields[i,0] + \" \" + JoinFields[i,1] + " +
                "\";\";");
            output.WriteLine("dbCommand.ExecuteNonQuery();");
            output.WriteLine("msg.AppendFormat(\"Added column '{0}'.\", JoinFields[i,0]);");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("else");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("msg.AppendFormat(\"Missing column '{0}'.\", JoinFields[i,0]);");
            output.Indent--;
            output.WriteLine("}");
            output.Indent--;
            output.WriteLine("}");

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();
            
            output.WriteLine("dbConnection.Close();");
            output.WriteLine();

            if (_modelClass.ReferenceFields.Count > 0)
            {
                foreach (ReferenceField field in this._modelClass.ReferenceFields)
                {
                    if (field.ReferenceType.IsTableCoded)
                    {
                        // SKIP SUPER-CODED TABLES ----------------------
                        // Objects with super-coded tables will take care
                        // of creating/verifying
                    }
                    else if (field.IsTableCoded)
                    {
                        output.WriteLine("{0}Manager {1}Manager = ",
                            field.ReferenceType.Name,
                            field.PrivateName);
                        output.Indent++;
                        output.WriteLine("new {0}Manager(\"{1}\");",
                            field.ReferenceType.Name,
                            field.TableName);
                        output.Indent--;
                        output.WriteLine("msg.Append({0}Manager.VerifyTable(repair));",
                            field.PrivateName);
                        output.WriteLine();
                    }
                }
            }            

            output.WriteLine("return msg.ToString();");

            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region Create Table

            output.WriteLine("#region Default NitroCast Create Table Methods");
			output.WriteLine();

			//
			// Write Create Table References Method
			//
			if(_modelClass.ReferenceFields.LastOneToManyRelation != -1)
			{
				if(_modelClass.IsTableCoded)
					output.WriteLine("public static void CreateTableReferences()");
				else
					output.WriteLine("public static void CreateTableReferences(string tableName)");
				output.WriteLine("{");
				output.Indent++;

				if(_modelClass.IsTableCoded)
				{
					output.WriteLine("StringBuilder query = new StringBuilder(\"ALTER TABLE {0} ADD \");", _modelClass.DefaultTableName);
				}
				else
				{
					output.WriteLine("StringBuilder query = new StringBuilder(\"ALTER TABLE \");");
					output.WriteLine("query.Append(tableName);");
					output.WriteLine("query.Append(\" ADD \");");
				}

				int lastRelation = -1;
				for(int x = 0; x < _modelClass.ReferenceFields.Count; x++)
					if(_modelClass.ReferenceFields[x].IsTableCoded | !_modelClass.ReferenceFields[x].HasChildrenTables)
						lastRelation = x;

				for(int x = 0; x < _modelClass.ReferenceFields.Count; x++)
				{
					ReferenceField c = _modelClass.ReferenceFields[x];

					if(!c.IsTableCoded | c.HasChildrenTables)
						continue;

					if(_modelClass.IsTableCoded)
					{
						output.Write("query.Append(\" CONSTRAINT {0}_{1}_FK FOREIGN KEY ({1}ID) REFERENCES {2}({3}ID)",
							_modelClass.DefaultTableName, c.Name, c.TableName, c.ReferenceType.Name);
					}
					else
					{
						output.WriteLine("query.Append(\" CONSTRAINT \");");
						output.WriteLine("query.Append(tableName);");
						output.Write("query.Append(\"_{0}_FK FOREIGN KEY ({0}ID) REFERENCES {1}({2}ID)",
							c.Name, c.TableName, c.ReferenceType.Name);
					}
					if(x == lastRelation)
						output.WriteLine(";\");");
					else
						output.WriteLine(",\");");
				}			

				output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);");
				output.WriteLine("OleDbCommand dbCommand = new OleDbCommand(query.ToString(), dbConnection);");
				output.WriteLine("dbConnection.Open();");
				output.WriteLine("dbCommand.ExecuteNonQuery();");
				output.WriteLine();

				foreach(ReferenceField c in _modelClass.ReferenceFields)
				{
					if(!c.HasChildrenTables)
						continue;

					output.WriteLine("query.Length = 0;");
				
					if(_modelClass.IsTableCoded)
						output.WriteLine("query.Append(\"ALTER TABLE {0}Children_{1} \");", _modelClass.DefaultTableName, c.ColumnName);
					else
					{
						output.WriteLine("query.Append(\"ALTER TABLE \");");
						output.WriteLine("query.Append(tableName);");
						output.WriteLine("query.Append(\"Children_{0} \");", c.ColumnName);
					}

					if(_modelClass.IsTableCoded)
					{
						if(c.IsTableCoded)
						{
							output.WriteLine("query.Append(\" ADD CONSTRAINT {0}Children_{2}_{0}_FK FOREIGN KEY ({0}ID) REFERENCES {1}({0}ID), CONSTRAINT {0}Children_{2}_{4}_FK FOREIGN KEY ({4}ID) REFERENCES {3}({4}ID);\");", _modelClass.Name, _modelClass.DefaultTableName, c.Name, c.TableName, c.ReferenceType.Name);
							output.WriteLine("dbCommand.CommandText = query.ToString();");
							output.WriteLine("dbCommand.ExecuteNonQuery();");
							output.WriteLine();
						}
						else
						{
							output.WriteLine("query.Append(\" ADD CONSTRAINT {0}{2}_FK FOREIGN KEY ({0}ID) REFERENCES {1}({0}ID);\");", _modelClass.Name, _modelClass.DefaultTableName, c.Name, c.TableName, c.ReferenceType.Name);
							output.WriteLine("dbCommand.CommandText = query.ToString();");
							output.WriteLine("dbCommand.ExecuteNonQuery();");
							output.WriteLine();
						}
					}
					else
					{
						output.WriteLine("query.Append(\" ADD CONSTRAINT {0}{2}{4}_FK FOREIGN KEY ({4}ID) REFERENCES {3}({4}ID);\");", _modelClass.Name, _modelClass.DefaultTableName, c.Name, c.TableName, c.ReferenceType.Name);
						output.WriteLine("dbCommand.CommandText = query.ToString();");
						output.WriteLine("dbCommand.ExecuteNonQuery();");
						output.WriteLine();
					}
				}

				output.WriteLine("dbConnection.Close();");

				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}

			//
			// Write Table Create Method
			//
			output.WriteLine("public void CreateTable()");
			output.WriteLine("{");
			output.Indent++;
			if(_modelClass.IsTableCoded)
			{
				output.WriteLine("StringBuilder query = " +
                    "new StringBuilder(\"CREATE TABLE {0} \");", 
                    _modelClass.DefaultTableName);
			}
			else
			{
				output.WriteLine("StringBuilder query = " +
                    "new StringBuilder(\"CREATE TABLE \");");
				output.WriteLine("query.Append(tableName);");
			}

            output.WriteSeparationStart("query.Append(\" ({0}ID COUNTER(1,1) " +
                "CONSTRAINT {0}ID PRIMARY KEY, \" +", _modelClass.Name);

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                foreach (object item in folder.Items)
                {
                    if (item is ValueField)
                    {
                        ValueField f = (ValueField)item;

                        if (f.IsUnique)
                        {
                            if (_modelClass.IsTableCoded)
                            {
                                output.WriteSeparation(f.ColumnName +
                                    " " +
                                    string.Format(f.ValueType.DbType,
                                    f.Length) +
                                    " CONSTRAINT Unique" + f.Name +
                                    " UNIQUE", "\"", ",\" +");
                            }
                            else
                            {
                                output.WriteSeparation(f.ColumnName +
                                    " " +
                                    string.Format(f.ValueType.DbType,
                                    f.Length) +
                                    " \" + tableName + \"" + f.Name +
                                    " UNIQUE", "\"", ",\" +");
                            }
                        }
                        else
                        {
                            output.WriteSeparation(f.ColumnName +
                                " " +
                                string.Format(f.ValueType.DbType,
                                f.Length), "\"", ",\" +");
                        }

                    }
                    else if (item is ReferenceField)
                    {
                        ReferenceField r = (ReferenceField)item;

                        if (!r.HasChildrenTables)
                        {
                            if (!r.IsTableCoded)
                            {
                                output.WriteLine("\"{0}Table TEXT(255),\" +", 
                                    r.Name);
                            }

                            output.WriteSeparation(string.Format("{0}ID LONG",
                                r.Name), "\"", ",\" +");
                        }
                    }
                    else if (item is EnumField)
                    {
                        EnumField e = (EnumField)item;

                        output.WriteSeparation(string.Format("{0} {1}",
                            e.Name,
                            e.EnumType.ParentEnumEntry.ValueType.DbType),
                            "\"", ",\" +");
                    }
                }
            }

            output.WriteSeparationEnd(");\");");
			output.WriteLine();

			output.WriteLine("OleDbConnection dbConnection = new OleDbConnection(connectionString);");
			output.WriteLine("OleDbCommand dbCommand = new OleDbCommand(query.ToString(), dbConnection);");
			output.WriteLine("dbConnection.Open();");
			output.WriteLine("dbCommand.ExecuteNonQuery();");
			output.WriteLine();

			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				// Create Object Level Children Tables
				if(c.IsTableCoded & !c.ReferenceType.IsTableCoded)
				{					
					output.WriteLine("//");
					output.WriteLine("// Create object level table for {0}.", c.Name);
					output.WriteLine("//");
                    output.WriteLine("{0}Manager {1}Manager = new {0}Manager(\"{2}\");",
                        c.ReferenceType.Name, c.PrivateName, c.TableName);
					output.WriteLine("{0}Manager.CreateTable();",
					    c.PrivateName);
					output.WriteLine();
				}

				if(!c.HasChildrenTables)
					continue;

				output.WriteLine("//");
				output.WriteLine("// Create children table for {0}.", c.Name);
				output.WriteLine("//");
				output.WriteLine("query.Length = 0;");
				if(_modelClass.IsTableCoded)
					output.WriteLine("query.Append(\"CREATE TABLE {0}Children_{1} \");", _modelClass.DefaultTableName, c.ColumnName);
				else
				{
					output.WriteLine("query.Append(\"CREATE TABLE \");");
					output.WriteLine("query.Append(tableName);");
					output.WriteLine("query.Append(\"Children_{0} \");", c.ColumnName);
				}
				if(_modelClass.Name == c.ReferenceType.Name)
					output.WriteLine("query.Append(\"({0}ID LONG, {1}ChildID LONG);\");", _modelClass.Name, c.ReferenceType.Name);
				else
					output.WriteLine("query.Append(\"({0}ID LONG, {1}ID LONG);\");", _modelClass.Name, c.ReferenceType.Name);


				output.WriteLine("dbCommand.CommandText = query.ToString();");
				output.WriteLine("dbCommand.ExecuteNonQuery();");
				output.WriteLine();
			}			

			output.WriteLine("dbConnection.Close();");
			
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Delete Tables

			

			#endregion

			#region Cache Methods

            if (_modelClass.IsCachingEnabled | _modelClass.IsCollectionCachingEnabled)
            {
                output.WriteLine("#region Cache Methods");
                output.WriteLine();

                #region Single Object Cache Methods

                if (_modelClass.IsCachingEnabled)
                {
                    output.WriteLine("static System.Web.Caching.Cache _webCache;");
                    output.WriteLine();
                    output.WriteLine("public static void CatchWebCache()");
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("if(_webCache == null && HttpContext.Current != null)");
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("_webCache = HttpContext.Current.Cache;");
                    output.Indent--;
                    output.WriteLine("}");
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();

                    output.WriteLine("private static void cacheStore(<.C> <.c>)");
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("CatchWebCache();");
					output.WriteLine("if(_webCache == null) return;");

                    if (!_modelClass.IsTableCoded)
                    {
                        output.WriteLine("_webCache.Insert(\"GFX_<.C>_\" + <.c>.TableName + \"_\" + <.c>.ID.ToString(), " +
                            "<.c>.Copy(true), null, DateTime.MaxValue, TimeSpan.FromSeconds({0}), CacheItemPriority.Normal, null);",
                            _modelClass.CacheLifetime.TotalSeconds);
                    }
                    else
                    {
                        output.WriteLine("_webCache.Insert(\"GFX_<.C>_\" + <.c>.ID.ToString(), " +
                            "<.c>.Copy(true), null, DateTime.MaxValue, TimeSpan.FromSeconds({0}), CacheItemPriority.Normal, null);",
                            _modelClass.CacheLifetime.TotalSeconds);
                    }
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();

                    if (_modelClass.IsTableCoded)
                        output.WriteLine("private static <.C> cacheFind(int id)");
                    else
                        output.WriteLine("private static <.C> cacheFind(int id, string tableName)");
                    output.WriteLine("{");
                    output.Indent++;
					
                    output.WriteLine("CatchWebCache();");
					output.WriteLine("if(_webCache == null) return null;");

                    if (!_modelClass.IsTableCoded)
                        output.WriteLine("return (<.C>) _webCache[\"GFX_<.C>_\" + tableName + \"_\" + id.ToString()];");
                    else
                        output.WriteLine("return (<.C>) _webCache[\"GFX_<.C>_\" + id.ToString()];");

                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();

                    if (_modelClass.IsTableCoded)
                        output.WriteLine("private static void cacheRemove(int id)");
                    else
                        output.WriteLine("private static void cacheRemove(int id, string tableName)");
                    output.WriteLine("{");
                    output.Indent++;

                    output.WriteLine("CatchWebCache();");
					output.WriteLine("if(_webCache == null) return;");

                    if (!_modelClass.IsTableCoded)
                        output.WriteLine("_webCache.Remove(\"GFX_<.C>_\" + tableName + \"_\" + id.ToString());");
                    else
                        output.WriteLine("_webCache.Remove(\"GFX_<.C>_\" + id.ToString());");

                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();
                }

                #endregion

                #region Collection Object Cache Methods

                if (_modelClass.IsCollectionCachingEnabled)
                {
                    output.WriteLine("private static void invalidateCachedCollections()");
                    output.WriteLine("{");
                    output.Indent++;
                    output.WriteLine("CatchWebCache();");
					output.WriteLine("if(_webCache == null) return;");
                    output.WriteLine("foreach(System.Collections.DictionaryEntry entry in _webCache)");
                    output.WriteLine("\tif(entry.Key.ToString().StartsWith(\"__{0}_\"))", _modelClass.Name);
                    output.WriteLine("\t\t_webCache.Remove(entry.Key.ToString());");
                    output.Indent--;
                    output.WriteLine("}");
                    output.WriteLine();
                }

                output.WriteLine("#endregion");
                output.WriteLine();

                #endregion
            }			

            #endregion

            #region Custom Code

            if (CustomCode != null && CustomCode.Length > 0)
			{
				output.WriteLine("//--- Begin Custom Code ---");
				output.WriteDirect(CustomCode);
				output.WriteLine("//--- End Custom Code ---");
            }

            #endregion

            // End Class Declaration
			output.Indent--;
			output.WriteLine("}");

			// End Namespace Declaration
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			return output.ToString();
		}

		#endregion

	}
}