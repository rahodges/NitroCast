using System;
using NitroCast.Core;
using NitroCast.Core.Extensions;

namespace NitroCast.Extensions.Default
{
	/// <summary>
	/// Summary description for WebEditorGenerator.
	/// </summary>
	[ExtensionAttribute("Web View Class",
		 "Roy A.E. Hodges",
		 "Copyright © 2004 Roy A.E. Hodges. All Rights Reserved.",
		 "{0}View.cs",
		 "Default class generator for the object being designed. The default manager class is required in the assembly. " + 
		 "It is recommended to include the default collection class as well.",
		 "\\Default\\Object Class",true)]
	public class WebViewGenerator : OutputExtension
	{
		public WebViewGenerator()
		{
            IsWebControl = true;
            ExtensionType = OutputExtensionType.ModelClass;
		}

		public override string Render()
		{
			CodeWriter output = new CodeWriter();

            output.WriteLine("/* ********************************************************** *");
            output.WriteLine(" * AMNS NitroCast v1.0 Web View Generator - GreyFox             *");
            output.WriteLine(" * Autogenerated by NitroCast © 2004 Roy A.E Hodges             *");
            output.WriteLine(" * All Rights Reserved                                        *");
            output.WriteLine(" * ---------------------------------------------------------- *");
            output.WriteLine(" * Source code may not be reproduced or redistributed without *");
            output.WriteLine(" * written expressed permission from the author.              *");
            output.WriteLine(" * Permission is granted to modify source code by licencee.   *");
            output.WriteLine(" * These permissions do not extend to third parties.          *");
            output.WriteLine(" * ********************************************************** */");
            output.WriteLine();

			output.CurrentClass = _modelClass;

			output.WriteLine("using System;");
			output.WriteLine("using System.Data;");
			output.WriteLine("using System.Web.UI;");
//			output.WriteLine("using System.Web.UI.WebControls;");
			output.WriteLine("using System.ComponentModel;");
//			output.WriteLine("using Amns.GreyFox.WebControls;");
			
			//
			// Add imported namespaces
			//
			int importCount = -1;
			bool addImport = true;
			string[] namespacelist = new string[_modelClass.ReferenceFields.Count + _modelClass.ValueFields.Count];
			foreach(ValueField f in _modelClass.ValueFields)
			{
				addImport = true;
				foreach(string name in namespacelist)
					if(f.ValueType.TypeEditorNamespace == name |
						f.ValueType.TypeEditorNamespace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = f.ValueType.TypeEditorNamespace;
				}
			}

			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				addImport = true;

				foreach(string name in namespacelist)
					if(c.ReferenceType.NameSpace == name | c.ReferenceType.NameSpace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = c.ReferenceType.NameSpace;										
				}
			}

			bool webControlReferenceExists = false;
			foreach(string name in namespacelist)
				webControlReferenceExists |= name == "Amns.GreyFox.Web.UI.WebControls";

			for(int x = 0; x <= importCount; x++)
				output.WriteLine("using {0};", namespacelist[x]);
			if(!webControlReferenceExists)
				output.WriteLine("using Amns.GreyFox.Web.UI.WebControls;");
			
			output.WriteLine();
			output.WriteLine("namespace {0}.Web.UI.WebControls", _modelClass.Namespace);
			output.WriteLine("{");

			output.Indent++;
			output.WriteLine("/// <summary>");
			output.WriteLine("/// Default web editor for {0}.", _modelClass.Name);
			output.WriteLine("/// </summary>");
			
			output.Write("[ToolboxData(\"<{0}:", _modelClass.Name);
			output.Write(_modelClass.Name);
			output.Write("View runat=server></{0}:");
			output.Write(_modelClass.Name);
			output.WriteLine("View>\")]");
			output.WriteLine("public class {0}View : TableWindow, INamingContainer", _modelClass.Name);
			output.WriteLine("{");
			
			output.Indent++;
			output.WriteLine("private int {0}ID;", _modelClass.PrivateName);
			if(!_modelClass.IsTableCoded)
				output.WriteLine("private string {0}Table = \"{1}\";", _modelClass.PrivateName, _modelClass.DefaultTableName);
			output.WriteLine("private {0} {1};", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine();
			
			// The fun part... make fields for objects...

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				output.WriteLine("#region Private Control Fields for {0} Folder", folder.Name);
				output.WriteLine();

				foreach(ValueField f in folder.Fields)
					output.WriteLine("private Literal lt{0} = new Literal();", f.Name);

				foreach(ReferenceField c in folder.Children)
					output.WriteLine("private Literal lt{0} = new Literal();", c.Name);

				output.WriteLine();
				output.WriteLine("#endregion");
				output.WriteLine();
			}

			output.WriteLine("private Button btOk = new Button();");
			output.WriteLine("private Button btDelete = new Button();");
			output.WriteLine();

			#region Public Properties

			output.WriteLine("#region Public Control Properties");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Data\"), DefaultValue(0)]");
			output.WriteLine("public int {0}ID", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return {0}ID;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("{0}ID = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("[Bindable(true), Category(\"Data\"), DefaultValue(\"{0}\")]", _modelClass.DefaultTableName);
				output.WriteLine("public string {0}Table", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("get");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("return {0}Table;", _modelClass.PrivateName);
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine("set");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("{0}Table = value;", _modelClass.PrivateName);
				output.Indent--;
				output.WriteLine("}");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Create Child Controls

			output.WriteLine("protected override void CreateChildControls()");
			output.WriteLine("{");
				
			output.Indent++;
			output.WriteLine("Controls.Clear();");
			output.WriteLine();

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				// Ignore Empty Folders
				if(folder.Items.Count == 0)
					continue;

				// Isolate controls in regions for easier readability
				output.WriteLine("#region Child Controls for {0} Folder", folder.Name);
				output.WriteLine();

				foreach(object item in folder.Items)
				{
					if(item is ValueField)
					{
						ValueField f = (ValueField) item;
						output.WriteLine("lt{0}.EnableViewState = false;", f.Name);
						output.WriteLine("Controls.Add(lt{0});", f.Name);
						output.WriteLine();
					}
					else if(item is ReferenceField)
					{
						ReferenceField c = (ReferenceField) item;
						output.WriteLine("lt{0}.EnableViewState = false;", c.Name);
						output.WriteLine("Controls.Add(lt{0});", c.Name);
						output.WriteLine();
					}
				}

				output.WriteLine("#endregion");
				output.WriteLine();
			}

			output.WriteLine("btOk.Text = \"OK\";");
			output.WriteLine("btOk.Width = Unit.Pixel(72);");
			output.WriteLine("btOk.EnableViewState = false;");
			output.WriteLine("btOk.Click += new EventHandler(ok_Click);");
			output.WriteLine("Controls.Add(btOk);");
			output.WriteLine();

			output.WriteLine("btDelete.Text = \"Delete\";");
			output.WriteLine("btDelete.Width = Unit.Pixel(72);");
			output.WriteLine("btDelete.EnableViewState = false;");
			output.WriteLine("btDelete.Click += new EventHandler(delete_Click);");
			output.WriteLine("Controls.Add(btDelete);");
			output.WriteLine();

			output.WriteLine("ChildControlsCreated = true;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region ok_Click

			output.WriteLine("#region ok_Click Save and Update Method");
			output.WriteLine();

			output.WriteLine("protected void ok_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("OnOkClicked(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region delete_click

			output.WriteLine("protected void delete_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("this.OnDeleteClicked(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region Public Control Events

			output.WriteLine("public event EventHandler OkClicked;");
			output.WriteLine("protected virtual void OnOkClicked(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(OkClicked != null)");
			output.Indent++;
			output.WriteLine("OkClicked(this, e);");
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler DeleteClicked;");
			output.WriteLine("protected virtual void OnDeleteClicked(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(DeleteClicked != null)");
			output.WriteLine("DeleteClicked(this, e);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region OnInit

			output.WriteLine("protected override void OnInit(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("columnCount = 2;");
			output.WriteLine("features = TableWindowFeatures.DisableContentSeparation | ");
			output.Indent++;
			output.WriteLine("TableWindowFeatures.WindowPrinter;");
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region OnPreRender

			output.WriteLine("protected override void OnPreRender(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(<.c>ID != 0)", _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;
			if(!_modelClass.IsTableCoded)
				output.WriteLine("<.c> = new <.C>(<.c>Table, <.c>ID);");
			else
				output.WriteLine("<.c> = new <.C>(<.c>ID);");
			output.WriteLine();

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				output.WriteLine("#region Bind {0} Folder", folder.Name);
				output.WriteLine();

				output.WriteLine("//");
				output.WriteLine("// Set Field Entries");
				output.WriteLine("//");
				output.WriteLine();

				foreach(ValueField f in folder.Fields)
				{
					if(f.IsNullable & f.ValueType.IsNullible)
					{
						output.WriteLine("if({0}.{1} != {2})", _modelClass.Name, f.Name, f.ValueType.NullValue);
						output.WriteLine("lt{0}.Text = <.c>.{0}.ToString();", f.Name, _modelClass.Name);
						output.WriteLine("else");
						output.WriteLine("lt{0}.Text = string.Empty;", f.Name);
					}
					else
					{
						output.WriteLine("lt{0}.Text = <.c>.{0}.ToString();", f.Name, _modelClass.Name);
					}					
				}
				output.WriteLine();

				if(_modelClass.ReferenceFields.Count > 0)
				{
					output.WriteLine("//");
					output.WriteLine("// Set Children Selections");
					output.WriteLine("//");
					output.WriteLine();

					foreach(ReferenceField c in folder.Children)
					{
						output.WriteLine("// {0}", c.Name);
						output.WriteLine();
						output.WriteLine("if(<.c>.{0} != null)", c.Name);
						output.WriteLine("\tlt{0}.Text = <.c>.{0}.ToString();", c.Name);
						output.WriteLine("else");
						output.WriteLine("\tlt{0}.Text = string.Empty;", c.Name);
						output.WriteLine();
					}
				}
				output.WriteLine();
				
				output.WriteLine("#endregion");
				output.WriteLine();
			}

			output.WriteLine("text = \"View {0} - \" + <.c>.ToString();", _modelClass.Caption, _modelClass.Name);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");

			#endregion

			#region RenderContent

			output.WriteLine("protected override void RenderContent(HtmlTextWriter output)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("RenderRow(\"row1\", \"{0} ID\", {1}ID.ToString());", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("output.WriteEndTag(\"tr\");");
			output.WriteLine();

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				output.WriteLine("render{0}Folder(output);", folder.CodeName);
				output.WriteLine();
			}

			//
			// Render Ok and Cancel Buttons
			//
			output.WriteLine("//");
			output.WriteLine("// Render OK/Cancel Buttons");
			output.WriteLine("//");
			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
			output.WriteLine("output.WriteAttribute(\"align\", \"right\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine("btOk.RenderControl(output);");
			output.WriteLine("if(DeleteClicked != null)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("output.Write(\" \");");
			output.WriteLine("btDelete.RenderControl(output);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteEndTag(\"tr\");");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region Render Folder Methods
			
			foreach(ClassFolder folder in _modelClass.Folders)
			{
				output.WriteLine("#region Render {0} Folder", folder.Name);
				output.WriteLine();

				output.WriteLine("private void render{0}Folder(HtmlTextWriter output)", folder.CodeName);
				output.WriteLine("{");
				output.Indent++;

				//
				// Render Label
				//
				output.WriteLine("//");
				output.WriteLine("// Render {0} Folder", folder.Name);
				output.WriteLine("//");
				output.WriteLine("output.WriteFullBeginTag(\"tr\");");
				output.WriteLine("output.WriteBeginTag(\"td\");");
				output.WriteLine("output.WriteAttribute(\"class\", SubHeaderCssClass);");
				output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
				output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
				if(folder.Caption != string.Empty)
					output.WriteLine("output.Write(\"{0}\");", folder.Caption);
				else
					output.WriteLine("output.Write(\"{0}\");", folder.Name);
				output.WriteLine("output.WriteEndTag(\"td\");");
				output.WriteLine("output.WriteEndTag(\"tr\");");
				output.WriteLine();

				foreach(object i in folder.Items)
				{
					if(i is ValueField)
					{
						ValueField f = (ValueField) i;

						//
						// Render Label
						//
						output.WriteLine("//");
						output.WriteLine("// Render {0}", f.Name);
						output.WriteLine("//");
						output.WriteLine("output.WriteFullBeginTag(\"tr\");");
						output.WriteLine("output.WriteBeginTag(\"td\");");
						output.WriteLine("output.WriteAttribute(\"valign\", \"top\");");
						output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
						if(f.Caption != string.Empty)
							output.WriteLine("output.Write(\"{0}\");", f.Caption);
						else
							output.WriteLine("output.Write(\"{0}\");", f.Name);
						output.WriteLine("output.WriteEndTag(\"td\");");
				
						//
						// Render Control				
						//
						output.WriteLine("output.WriteBeginTag(\"td\");");
						output.WriteLine("output.WriteAttribute(\"class\", \"row2\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
						output.WriteLine("lt{0}.RenderControl(output);", f.Name);
						output.WriteLine("output.WriteEndTag(\"td\");");
						output.WriteLine("output.WriteEndTag(\"tr\");");
						output.WriteLine();
					}
					else if(i is ReferenceField)
					{
						ReferenceField c = (ReferenceField) i;
						
						if(!c.IsClientEditEnabled & !c.IsClientViewEnabled)
							continue;
						
						//
						// Render Label
						//
						output.WriteLine("//");
						output.WriteLine("// Render {0}", c.Name);
						output.WriteLine("//");
						output.WriteLine("output.WriteFullBeginTag(\"tr\");");
	   					output.WriteLine("output.WriteBeginTag(\"td\");");
						output.WriteLine("output.WriteAttribute(\"valign\", \"top\");");
						output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
						if(c.Caption != string.Empty)
							output.WriteLine("output.Write(\"{0}\");", c.Caption);
						else
							output.WriteLine("output.Write(\"{0}\");", c.Name);
						output.WriteLine("output.WriteEndTag(\"td\");");

						//
						// Render Control
						//
						output.WriteLine("output.WriteBeginTag(\"td\");");
						output.WriteLine("output.WriteAttribute(\"class\", \"row2\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
						output.WriteLine("lt{0}.RenderControl(output);", c.Name);
						output.WriteLine("output.WriteEndTag(\"td\");");
						output.WriteLine("output.WriteEndTag(\"tr\");");
						output.WriteLine();
					}
				}
                
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();

				output.WriteLine("#endregion");
				output.WriteLine();
			}

			#endregion

			#region ViewState

			output.WriteLine("protected override void LoadViewState(object savedState)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(savedState != null)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object[] myState = (object[]) savedState;");
			output.WriteLine("if(myState[0] != null)");
			output.Indent++;
			output.WriteLine("base.LoadViewState(myState[0]);");
			output.Indent--;
			output.WriteLine("if(myState[1] != null)");
			output.Indent++;
			output.WriteLine("{0}ID = (int) myState[1];", _modelClass.PrivateName);
			output.Indent--;		
            output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected override object SaveViewState()");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object baseState = base.SaveViewState();");
			output.WriteLine("object[] myState = new object[2];");
			output.WriteLine("myState[0] = baseState;");
			output.WriteLine("myState[1] = {0}ID;", _modelClass.PrivateName);
			output.WriteLine("return myState;");
			output.Indent--;
			output.WriteLine("}");

			#endregion

			// End Class
			output.Indent--;
			output.WriteLine("}");

			// End Namespace
			output.Indent--;
			output.WriteLine("}");

			return output.ToString();
		}
	}
}
