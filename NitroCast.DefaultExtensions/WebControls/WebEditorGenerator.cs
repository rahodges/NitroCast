using System;
using NitroCast.Core;
using NitroCast.Core.Extensions;

namespace NitroCast.Extensions.Default
{
	/// <summary>
	/// Summary description for WebEditorGenerator.
	/// </summary>
    [ExtensionAttribute("Web Editor Class",
         "Roy A.E. Hodges",
         "Copyright © 2003 Roy A.E. Hodges. All Rights Reserved.",
         "{0}Editor.cs.old",
         "Default class generator for the object being designed. The default manager class is required in the assembly. " +
         "It is recommended to include the default collection class as well.",
         "\\Default\\Object Class", true)]
	public class WebEditorGenerator : OutputExtension
	{
		public WebEditorGenerator()
		{
            IsWebControl = true;
            ValueFieldExtensionType = typeof(WebEditorValueFieldExtension);
            ReferenceFieldExtensionType = typeof(WebEditorReferenceFieldExtension);
            EnumFieldExtensionType = typeof(WebEditorEnumFieldExtension);
            ExtensionType = OutputExtensionType.ModelClass;
		}

		public override string Render()
		{
			CodeWriter output = new CodeWriter();

            output.WriteLine("/* ********************************************************** *");
            output.WriteLine(" * AMNS NitroCast v1.0 Web Editor                               *");
            output.WriteLine(" * Autogenerated by NitroCast © 2004 Roy A.E Hodges             *");
            output.WriteLine(" * All Rights Reserved                                        *");
            output.WriteLine(" * ---------------------------------------------------------- *");
            output.WriteLine(" * Source code may not be reproduced or redistributed without *");
            output.WriteLine(" * written expressed permission from the author.              *");
            output.WriteLine(" * Permission is granted to modify source code by licencee.   *");
            output.WriteLine(" * These permissions do not extend to third parties.          *");
            output.WriteLine(" * ********************************************************** */");
            output.WriteLine();

			output.WriteLine("using System;");
			output.WriteLine("using System.Data;");
			output.WriteLine("using System.Web.UI;");
			output.WriteLine("using System.ComponentModel;");
            output.WriteLine("using Amns.GreyFox.Web.UI.WebControls;");
			
			//
			// Add imported namespaces
			//
			int importCount = -1;
			bool addImport = true;
			string[] namespacelist = new string[_modelClass.ReferenceFields.Count + _modelClass.ValueFields.Count];
			foreach(ValueField f in _modelClass.ValueFields)
			{
				addImport = true;
				foreach(string name in namespacelist)
					if(f.ValueType.TypeEditorNamespace == name |
						f.ValueType.TypeEditorNamespace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = f.ValueType.TypeEditorNamespace;
				}
			}

			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				addImport = true;

				foreach(string name in namespacelist)
					if(c.ReferenceType.NameSpace == name | c.ReferenceType.NameSpace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = c.ReferenceType.NameSpace;										
				}
			}

            for(int x = 0; x <= importCount; x++)
				output.WriteLine("using {0};", namespacelist[x]);
						
			output.WriteLine();
			output.WriteLine("namespace {0}.Web.UI.WebControls", _modelClass.Namespace);
			output.WriteLine("{");

			output.Indent++;
			output.WriteLine("/// <summary>");
			output.WriteLine("/// Default web editor for {0}.", _modelClass.Name);
			output.WriteLine("/// </summary>");
			output.Write("[ToolboxData(\"<{0}:");
			output.Write(_modelClass.Name);
			output.Write("Editor runat=server></{0}:");
			output.Write(_modelClass.Name);
			output.WriteLine("Editor>\")]");
			output.WriteLine("public class {0}Editor : TableWindow, INamingContainer", _modelClass.Name);
			output.WriteLine("{");
			
			output.Indent++;
			output.WriteLine("private int {0}ID;", _modelClass.PrivateName);
			if(!_modelClass.IsTableCoded)
				output.WriteLine("private string {0}Table = \"{1}\";", _modelClass.PrivateName, _modelClass.DefaultTableName);
			output.WriteLine("private {0} obj;", _modelClass.Name);
			output.WriteLine("private bool loadFlag = false;");
			output.WriteLine("private bool resetOnAdd;");		// Resets form on add.
			output.WriteLine("private bool editOnAdd;");		// Changes form to edit when adding new object.
			output.WriteLine();
			
			// The fun part... make fields for objects...            

			foreach(ClassFolder folder in _modelClass.Folders)
			{
                if (folder.Name.StartsWith("_"))
                    continue;

				output.WriteLine("#region Private Control Fields for {0} Folder", folder.CodeName);
				output.WriteLine();

                folder.Builder.CreateControlFields(output, folder, false);

				output.WriteLine();
				output.WriteLine("#endregion");
				output.WriteLine();
			}

			output.WriteLine("private Button btOk = new Button();");
			output.WriteLine("private Button btCancel = new Button();");
			output.WriteLine("private Button btDelete = new Button();");
			output.WriteLine();

			#region Public Properties

			output.WriteLine("#region Public Control Properties");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Data\"), DefaultValue(0)]");
			output.WriteLine("public int {0}ID", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return {0}ID;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("loadFlag = true;");
			output.WriteLine("{0}ID = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Behavior\"), DefaultValue(false)]");
			output.WriteLine("public bool ResetOnAdd", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return resetOnAdd;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("resetOnAdd = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Behavior\"), DefaultValue(false)]");
			output.WriteLine("public bool EditOnAdd", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return editOnAdd;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("editOnAdd = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("[Bindable(true), Category(\"Data\"), DefaultValue(\"{0}\")]", _modelClass.DefaultTableName);
				output.WriteLine("public string {0}Table", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("get");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("return {0}Table;", _modelClass.PrivateName);
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine("set");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("{0}Table = value;", _modelClass.PrivateName);
				output.Indent--;
				output.WriteLine("}");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Create Child Controls

			output.WriteLine("protected override void CreateChildControls()");
			output.WriteLine("{");
				
			output.Indent++;
			output.WriteLine("Controls.Clear();");
			output.WriteLine("bindDropDownLists();");
			output.WriteLine();

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				// Ignore Empty Folders
				if(folder.Items.Count == 0)
					continue;

                if (folder.Name.StartsWith("_"))
                    continue;

				// Isolate controls in regions for easier readability
				output.WriteLine("#region Child Controls for {0} Folder", folder.Name);
				output.WriteLine();
                
                folder.Builder.CreateControlProperties(output, folder, true, false);

				output.WriteLine("#endregion");
				output.WriteLine();
			}

			output.WriteLine("btOk.Text = \"OK\";");
			output.WriteLine("btOk.Width = Unit.Pixel(72);");
			output.WriteLine("btOk.EnableViewState = false;");
			output.WriteLine("btOk.Click += new EventHandler(ok_Click);");
			output.WriteLine("Controls.Add(btOk);");
			output.WriteLine();

			output.WriteLine("btCancel.Text = \"Cancel\";");
			output.WriteLine("btCancel.Width = Unit.Pixel(72);");
			output.WriteLine("btCancel.EnableViewState = false;");
            output.WriteLine("btCancel.CausesValidation = false;");
			output.WriteLine("btCancel.Click += new EventHandler(cancel_Click);");
			output.WriteLine("Controls.Add(btCancel);");
			output.WriteLine();

			output.WriteLine("btDelete.Text = \"Delete\";");
			output.WriteLine("btDelete.Width = Unit.Pixel(72);");
			output.WriteLine("btDelete.EnableViewState = false;");
			output.WriteLine("btDelete.Click += new EventHandler(delete_Click);");
			output.WriteLine("Controls.Add(btDelete);");
			output.WriteLine();

			output.WriteLine("ChildControlsCreated = true;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region bindDropDownLists()

			output.WriteLine("private void bindDropDownLists()");
			output.WriteLine("{");
			output.Indent++;

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				if(folder.Children.Count > 0)
				{
					output.WriteLine("#region Bind " + folder.Name + " Child Data");
					output.WriteLine();

                    folder.Builder.CreateControlBinding(output, folder);

					output.WriteLine("#endregion");
					output.WriteLine();
				}
			}
			output.Indent--;
			output.WriteLine("}");
            output.WriteLine();

			#endregion

			#region ok_Click

			output.WriteLine("#region ok_Click Save and Update Method");
			output.WriteLine();

			output.WriteLine("protected void ok_Click(object sender, EventArgs e)");
			output.WriteLine("{");			
			output.Indent++;

            output.WriteLine("Page.Validate();");
            output.WriteLine("if (!Page.IsValid)");
            output.Indent++;
            output.WriteLine("return;");
            output.Indent--;
            output.WriteLine();

            output.WriteLine("if({0}ID == 0)", _modelClass.PrivateName);
			output.Indent++;
			if(!_modelClass.IsTableCoded)
				output.WriteLine("obj = new {0}({1}Table);", _modelClass.Name, _modelClass.PrivateName);
			else
				output.WriteLine("obj = new {0}();", _modelClass.Name);
			output.Indent--;
			output.WriteLine("else");
			output.Indent++;
			if(!_modelClass.IsTableCoded)
				output.WriteLine("obj = new {0}({1}Table, {1}ID);", _modelClass.Name, _modelClass.PrivateName);
			else
                output.WriteLine("obj = new {0}({1}ID);", _modelClass.Name, _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine();

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (folder.Name.StartsWith("_"))
                    continue;

                output.WriteLine("// {0}", folder.Name);
                output.WriteLine();
                folder.Builder.GetControlValues(output, "obj", folder);
                output.WriteLine();
            }

			output.WriteLine("if(editOnAdd)");
			output.Indent++;
			output.WriteLine("{0}ID = obj.Save();", _modelClass.PrivateName, _modelClass.Name);
			output.Indent--;
			output.WriteLine("else");
			output.Indent++;
			output.WriteLine("obj.Save();", _modelClass.PrivateName, _modelClass.Name);
			output.Indent--;
			output.WriteLine();

			//
			// Reset Objects Event
			//
			output.WriteLine("if(resetOnAdd)");
			output.WriteLine("{");
			output.Indent++;
            output.WriteLine("{0} newObj = new {0}();", _modelClass.Name);

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (folder.Name.StartsWith("_"))
                    continue;

                folder.Builder.SetControlValues(output, "newObj", folder);
            }

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("OnUpdated(EventArgs.Empty);");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region cancel_Click

			output.WriteLine("protected void cancel_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("this.OnCancelled(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region delete_click

			output.WriteLine("protected void delete_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("this.OnDeleteClicked(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region Public Control Events

			output.WriteLine("public event EventHandler Cancelled;");
			output.WriteLine("protected virtual void OnCancelled(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(Cancelled != null)");
			output.Indent++;
			output.WriteLine("Cancelled(this, e);");
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler Updated;");
			output.WriteLine("protected virtual void OnUpdated(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(Updated != null)");
			output.Indent++;
			output.WriteLine("Updated(this, e);");
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler DeleteClicked;");
			output.WriteLine("protected virtual void OnDeleteClicked(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(DeleteClicked != null)");
			output.WriteLine("DeleteClicked(this, e);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region OnInit

			output.WriteLine("protected override void OnInit(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("columnCount = 2;");
			output.WriteLine("features = TableWindowFeatures.DisableContentSeparation;");
			output.WriteLine("components = TableWindowComponents.Tabs;");
			output.WriteLine("tabStrip = new TabStrip();");
			output.WriteLine("tabStrip.Tabs = new TabList();");
			output.WriteLine();

            bool tabDisplayEnabled = true;

            for(int i = 0; i < _modelClass.Folders.Count; i++)
			{
                ClassFolder f = _modelClass.Folders[i];

                if (f.IsBrowsable != false)
                {
                    output.WriteLine("Tab {0}Tab = new Tab(\"{1}\");", f.CodeName, f.Name);
                    if (tabDisplayEnabled)
                    {
                        output.WriteLine("{0}Tab.Visible = true;", f.CodeName);
                        tabDisplayEnabled = false;
                    }
                    output.WriteLine("{0}Tab.RenderDiv += new TabRenderHandler(render{0}Folder);", f.CodeName);
                    if (i == 0)
                    {
                        output.WriteLine("{0}Tab.Visible = true;", f.CodeName);
                    }
                    output.WriteLine("tabStrip.Tabs.Add({0}Tab);", f.CodeName);
                    output.WriteLine();
                }
			}			
			
            output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region OnPreRender

			output.WriteLine("protected override void OnPreRender(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(loadFlag)", _modelClass.PrivateName);
			output.WriteLine("{");
            output.Indent++;
            output.WriteLine("if({0}ID > 0)", _modelClass.PrivateName);
            output.WriteLine("{");
			output.Indent++;
            if (!_modelClass.IsTableCoded)
            {
                output.WriteLine("obj = new {0}({1}Table, {1}ID);", _modelClass.Name, _modelClass.PrivateName);
            }
            else
            {
                output.WriteLine("obj = new {0}({1}ID);", _modelClass.Name, _modelClass.PrivateName);
            }
            output.WriteLine("text = \"Edit {0} - \" + obj.ToString();", _modelClass.Caption, _modelClass.Name);
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("else if({0}ID <= 0)", _modelClass.PrivateName);
            output.WriteLine("{");
            output.Indent++;
            if (!_modelClass.IsTableCoded)
            {
                output.WriteLine("obj = new {0}({1}Table);", _modelClass.Name, _modelClass.PrivateName);
            }
            else
            {
                output.WriteLine("obj = new {0}();", _modelClass.Name);
            }
            output.WriteLine("text = \"Add {0}\";", _modelClass.Caption);
            output.Indent--;
            output.WriteLine("}");
			output.WriteLine();

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (folder.Name.StartsWith("_"))
                    continue;

                folder.Builder.SetControlValues(output, "obj", folder);
            }
            			
            output.Indent--;
            output.WriteLine("}");
            output.Indent--;
            output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region RenderContent

			output.WriteLine("protected override void RenderContent(HtmlTextWriter output)");
			output.WriteLine("{");
			output.Indent++;
//			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
//			output.WriteLine("renderCell(output, \"{0} ID\", \"class=\\\"row1\\\"\");", ___classObject.Name);
//			output.WriteLine("renderCell(output, {0}ID.ToString(), \"class=\\\"row1\\\"\");", ___classObject.PrivateName);
//			output.WriteLine("output.WriteEndTag(\"tr\");");
//			output.WriteLine();

//			foreach(ClassFolder folder in ___classObject.Folders)
//			{
//				output.WriteLine("render{0}Folder(output);", folder.ProgramName);
//				output.WriteLine();
//			}

			output.WriteLine("RenderTabPanels(output);");

			//
			// Render Ok and Cancel Buttons
			//
			output.WriteLine("//");
			output.WriteLine("// Render OK/Cancel Buttons");
			output.WriteLine("//");
			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
			output.WriteLine("output.WriteAttribute(\"align\", \"right\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine("btOk.RenderControl(output);");
			output.WriteLine("output.Write(\"&nbsp;\");");
			output.WriteLine("btCancel.RenderControl(output);");
			output.WriteLine("if(DeleteClicked != null)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("output.Write(\" \");");
			output.WriteLine("btDelete.RenderControl(output);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteEndTag(\"tr\");");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region Render Folder Methods

			foreach(ClassFolder folder in _modelClass.Folders)
			{
				output.WriteLine("private void render{0}Folder(HtmlTextWriter output)", folder.CodeName);
				output.WriteLine("{");
				output.Indent++;

//				Labels are unnecissary for Amns.GreyFoxTabs because the tab name is now highlighted

//				//
//				// Render Label
//				//
//				output.WriteLine("//");
//				output.WriteLine("// Render {0} Folder", folder.Name);
//				output.WriteLine("//");
//				output.WriteLine("output.WriteFullBeginTag(\"tr\");");
//				output.WriteLine("output.WriteBeginTag(\"td\");");
//				output.WriteLine("output.WriteAttribute(\"class\", SubHeaderCssClass);");
//				output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
//				output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
//				
//				if(folder.Caption != string.Empty)
//					output.WriteLine("output.Write(\"{0}\");", folder.Caption);
//				else
//					output.WriteLine("output.Write(\"{0}\");", folder.Name);
//				
//				output.WriteLine("output.WriteEndTag(\"td\");");
//				output.WriteLine("output.WriteEndTag(\"tr\");");
//				output.WriteLine();

				foreach(object i in folder.Items)
				{
					if(i is ValueField)
					{
						ValueField f = (ValueField) i;

						if(!f.IsClientEditEnabled & !f.IsClientViewEnabled)
							continue;

						//
						// Render Label
						//
						output.WriteLine("//");
						output.WriteLine("// Render {0}", f.Name);
						output.WriteLine("//");
						output.WriteLine("output.WriteFullBeginTag(\"tr\");");
						output.WriteLine("output.WriteBeginTag(\"td\");");						
						output.WriteLine("output.WriteAttribute(\"valign\", \"top\");");
//						output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
						if(f.Caption != string.Empty)
							output.WriteLine("output.Write(\"{0}\");", f.Caption);
						else
							output.WriteLine("output.Write(\"{0}\");", f.Name);
						output.WriteLine("output.WriteEndTag(\"td\");");
				
						//
						// Render Control				
						//
						output.WriteLine("output.WriteBeginTag(\"td\");");
//						output.WriteLine("output.WriteAttribute(\"class\", \"row2\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
                        if (f.IsClientEditEnabled)
                        {
                            output.WriteLine("{0}.RenderControl(output);", f.TypeEditorControl);

                            if (f.ValueType.ValidatorClass != string.Empty)
                            {
                                output.WriteLine("{0}.RenderControl(output);", f.TypeValidatorControl);
                            }
                        }
                        else if (f.IsClientViewEnabled)
                        {
                            output.WriteLine("lt{0}.RenderControl(output);", f.Name);
                        }
						output.WriteLine("output.WriteEndTag(\"td\");");
						output.WriteLine("output.WriteEndTag(\"tr\");");
						output.WriteLine();
					}
					else if(i is ReferenceField)
					{
						ReferenceField c = (ReferenceField) i;
						
						if(!c.IsClientEditEnabled & !c.IsClientViewEnabled)
							continue;
						
						//
						// Render Label
						//
						output.WriteLine("//");
						output.WriteLine("// Render {0}", c.Name);
						output.WriteLine("//");
						output.WriteLine("output.WriteFullBeginTag(\"tr\");");
						output.WriteLine("output.WriteBeginTag(\"td\");");						
						output.WriteLine("output.WriteAttribute(\"valign\", \"top\");");
//						output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
						if(c.Caption != string.Empty)
							output.WriteLine("output.Write(\"{0}\");", c.Caption);
						else
							output.WriteLine("output.Write(\"{0}\");", c.Name);
						output.WriteLine("output.WriteEndTag(\"td\");");

						//
						// Render Control
						//
						output.WriteLine("output.WriteBeginTag(\"td\");");
//						output.WriteLine("output.WriteAttribute(\"class\", \"row2\");");
						output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
                        c.Builder.RenderControl(output, c);
						output.WriteLine("output.WriteEndTag(\"td\");");
						output.WriteLine("output.WriteEndTag(\"tr\");");
						output.WriteLine();
					}
				}
                
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}

			#endregion

			#region ViewState

			output.WriteLine("protected override void LoadViewState(object savedState)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(savedState != null)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object[] myState = (object[]) savedState;");
			output.WriteLine("if(myState[0] != null)");
			output.Indent++;
			output.WriteLine("base.LoadViewState(myState[0]);");
			output.Indent--;
			output.WriteLine("if(myState[1] != null)");
			output.Indent++;
			output.WriteLine("{0}ID = (int) myState[1];", _modelClass.PrivateName);
			output.Indent--;		
            output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected override object SaveViewState()");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object baseState = base.SaveViewState();");
			output.WriteLine("object[] myState = new object[2];");
			output.WriteLine("myState[0] = baseState;");
			output.WriteLine("myState[1] = {0}ID;", _modelClass.PrivateName);
			output.WriteLine("return myState;");
			output.Indent--;
			output.WriteLine("}");

			#endregion
            
			if(CustomCode != null && CustomCode.Length > 0)
			{
				output.WriteLine("//--- Begin Custom Code ---");
				output.Write(CustomCode);
				output.WriteLine("//--- End Custom Code ---");
			}
			                        
			// End Class Declaration
			output.Indent--;
			output.WriteLine("}");

			// End Namespace Declaration
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			return output.ToString();
		}
	}
}