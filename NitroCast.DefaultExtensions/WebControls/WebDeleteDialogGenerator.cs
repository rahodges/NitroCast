using System;
using NitroCast.Core;
using NitroCast.Core.Extensions;

namespace NitroCast.Extensions.Default
{
	/// <summary>
	/// Summary description for WebGridGenerator.
	/// </summary>
	[ExtensionAttribute("Web Delete Dialog Class",
		 "Roy A.E. Hodges",
		 "Copyright © 2003 Roy A.E. Hodges. All Rights Reserved.",
		 "{0}DeleteDialog.cs",
		 "Default web delete dialog for the object.",
		 "\\Default\\Delete Dialog Class", true)]
	public class WebDeleteDialogGenerator : OutputExtension
	{
		public WebDeleteDialogGenerator()
		{
            IsWebControl = true;
            ExtensionType = OutputExtensionType.ModelClass;
		}

		public override string Render()
		{
			CodeWriter output = new CodeWriter();

            output.WriteLine("/* ********************************************************** *");
            output.WriteLine(" * AMNS NitroCast v1.0 Class Delete Dialog                      *");
            output.WriteLine(" * Autogenerated by NitroCast © 2004 Roy A.E Hodges             *");
            output.WriteLine(" * All Rights Reserved                                        *");
            output.WriteLine(" * ---------------------------------------------------------- *");
            output.WriteLine(" * Source code may not be reproduced or redistributed without *");
            output.WriteLine(" * written expressed permission from the author.              *");
            output.WriteLine(" * Permission is granted to modify source code by licencee.   *");
            output.WriteLine(" * These permissions do not extend to third parties.          *");
            output.WriteLine(" * ********************************************************** */");
            output.WriteLine();

			output.WriteLine("using System;");
			output.WriteLine("using System.ComponentModel;");
			output.WriteLine("using System.Web;");
			output.WriteLine("using System.Web.UI;");
			output.WriteLine("using System.Web.UI.WebControls;");
			output.WriteLine("using Amns.GreyFox.Web.UI.WebControls;");
			output.WriteLine("using {0};", _modelClass.Namespace);

			//
			// Add imported namespaces
			//
			int importCount = -1;
			bool addImport = true;
			string[] namespacelist = new string[_modelClass.ReferenceFields.Count];
			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				addImport = true;

				foreach(string name in namespacelist)
					if(c.ReferenceType.NameSpace == name | c.ReferenceType.NameSpace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = c.ReferenceType.NameSpace;										
				}
			}

			for(int x = 0; x <= importCount; x++)
				output.WriteLine("using {0};", namespacelist[x]);
			
			output.WriteLine();
			output.WriteLine("namespace {0}.Web.UI.WebControls", _modelClass.Namespace);
			output.WriteLine("{");
			
			output.Indent++;
			output.WriteLine("/// <summary>");
			output.WriteXmlSummary(string.Format("A delete dialog for {0}.", _modelClass.Name));
			output.WriteLine("/// </summary>");
			output.Write("[ToolboxData(\"<{0}:", _modelClass.Name);
			output.Write("{0}DeleteDialog runat=server>", _modelClass.Name);
			output.Write("</{0}:");
			output.WriteLine("{0}DeleteDialog>\")]", _modelClass.Name);
			
			//
			// Class Start
			//
			output.WriteLine("public class {0}DeleteDialog : TableWindow", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;	
		
			//
			// Private Fields
			//
			if(!_modelClass.IsTableCoded)
			{
				if(_modelClass.DefaultTableName != string.Empty)
					output.WriteLine("private string tableName = \"{0}\";", _modelClass.DefaultTableName);
				else
					output.WriteLine("private string tableName;");
			}
			output.WriteLine();

			output.WriteLine("private int {0}ID = -1;", _modelClass.PrivateName);
			output.WriteLine("private {0} {1};", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine();
			output.WriteLine("private Button btOk = new Button();");
			output.WriteLine("private Button btCancel = new Button();");
			output.WriteLine();

			output.WriteLine("#region Public Properties");
            
			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("[Bindable(false),");
				output.Indent++;
				output.WriteLine("Category(\"Data\"),");
				output.WriteLine("DefaultValue(\"{0}\")]", _modelClass.DefaultTableName);
				output.Indent--;
				output.WriteProperty("string", "tableName", "TableName");
				output.WriteLine();
			}

			//
			// Public Properties
			//
			output.WriteLine("[Bindable(false),");
			output.Indent++;
			output.WriteLine("Category(\"Behavior\"),");
			output.WriteLine("DefaultValue(0)]");
			output.Indent--;
			output.WriteProperty("int", _modelClass.PrivateName + "ID", _modelClass.Name + "ID");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			//
			// Child Controls
			//
			output.WriteLine("// Child Controls");
			output.WriteLine("protected override void CreateChildControls()");
			output.WriteLine("{");
			output.Indent++;
            output.WriteLine("base.CreateChildControls();");
			output.WriteLine("Controls.Clear();");
			output.WriteLine();
			output.WriteLine("btOk.Text = \"OK\";");
			output.WriteLine("btOk.EnableViewState = false;");
			output.WriteLine("btOk.Click += new EventHandler(btOk_Click);");
			output.WriteLine("Controls.Add(btOk);");
			output.WriteLine();
			output.WriteLine("btCancel.Text = \"Cancel\";");
			output.WriteLine("btCancel.EnableViewState = false;");
			output.WriteLine("btCancel.Click += new EventHandler(btCancel_Click);");
			output.WriteLine("Controls.Add(btCancel);");
			output.WriteLine();
			output.WriteLine("ChildControlsCreated = true;");
			output.Indent--;
			output.WriteLine("}");

			output.WriteLine("protected void btOk_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("{0} {1} = new {0}({1}ID);", _modelClass.Name, _modelClass.PrivateName);
			output.WriteLine("{0}.Delete();", _modelClass.PrivateName);
			output.WriteLine();

			output.WriteLine("{0}ID = 0;", _modelClass.PrivateName);
			output.WriteLine();
			output.WriteLine("OnDeleted(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected void btCancel_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("this.OnCancelled(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("	#region Public Control Events");
			output.WriteLine();
			
			output.WriteLine("	public event EventHandler Cancelled;");
			output.WriteLine("protected virtual void OnCancelled(EventArgs e)");
			output.WriteLine("{");
			output.WriteLine("	if(Cancelled != null)");
			output.WriteLine("		Cancelled(this, e);");
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler Deleted;");
			output.WriteLine("protected virtual void OnDeleted(EventArgs e)");
			output.WriteLine("{");
			output.WriteLine("	if(Deleted != null)");
			output.WriteLine("		Deleted(this, e);");
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("#endregion");
			output.WriteLine();

			output.WriteLine("protected override void OnInit(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
            output.WriteLine("base.OnInit(e);");
			output.WriteLine("columnCount = 2;");
			output.WriteLine("features = TableWindowFeatures.DisableContentSeparation;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();
			output.WriteLine("protected override void OnPreRender(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
            output.WriteLine("base.OnPreRender(e);");
			output.WriteLine("if({0}ID != 0)", _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("{0} = new {1}({0}ID);", _modelClass.PrivateName, _modelClass.Name);
			output.WriteLine("text = \"Delete - \" + {0}.ToString();", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
            output.WriteLine("else");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("text = \"Delete {0}\";", _modelClass.Caption);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");			
			output.WriteLine();

			output.WriteLine("protected override void RenderContent(HtmlTextWriter output)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if({0}ID == 0)", _modelClass.PrivateName);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
			output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine();
			output.WriteLine("output.Write(\"The {0} selected does not exist.\");", _modelClass.Name);
			output.WriteLine();

			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteEndTag(\"tr\");");
			output.WriteLine("return;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
			output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine();

			output.WriteLine("output.Write(\"<strong>Warning:</strong> This action deletes the selected {0}.\" +", _modelClass.Caption);
			output.WriteLine("\"<em>Use with caution, this option cannot be undone.</em>\");");
			output.WriteLine();

			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteEndTag(\"tr\");");
			output.WriteLine();
			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");			");
			output.WriteLine("output.WriteAttribute(\"nowrap\", \"true\");");
			output.WriteLine("output.WriteAttribute(\"valign\", \"top\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine("output.Write(\"{0} to delete: \");", _modelClass.Caption);
			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
			output.WriteLine("output.WriteAttribute(\"width\", \"100%\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine("output.Write({0}.ToString());", _modelClass.PrivateName);
			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteEndTag(\"tr\");");
			output.WriteLine();
			output.WriteLine("output.WriteFullBeginTag(\"tr\");");
			output.WriteLine("output.WriteBeginTag(\"td\");");
			output.WriteLine("output.WriteAttribute(\"colspan\", \"2\");");
			output.WriteLine("output.WriteAttribute(\"align\", \"right\");");
			output.WriteLine("output.WriteAttribute(\"class\", \"row1\");");
			output.WriteLine("output.Write(HtmlTextWriter.TagRightChar);");
			output.WriteLine("btOk.RenderControl(output);");
			output.WriteLine("output.Write(\"&nbsp;\");");
			output.WriteLine("btCancel.RenderControl(output);");
			output.WriteLine("output.WriteEndTag(\"td\");");
			output.WriteLine("output.WriteEndTag(\"tr\");");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();
			
			output.WriteLine("#region ViewState Methods");
			output.WriteLine();
			output.WriteLine("protected override void LoadViewState(object savedState) ");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(savedState != null)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("// Load State from the array of objects that was saved at ;");
			output.WriteLine("// SavedViewState.");
			output.WriteLine("object[] myState = (object[])savedState;");
			output.WriteLine("if (myState[0] != null)");
			output.Indent++;
			output.WriteLine("base.LoadViewState(myState[0]);");
			output.Indent--;
			output.WriteLine("if (myState[1] != null)");
			output.Indent++;
			output.WriteLine("{0}ID = (int) myState[1];", _modelClass.PrivateName);
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected override object SaveViewState()");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object baseState = base.SaveViewState();");
			output.WriteLine("object[] myState = new object[2];");
			output.WriteLine("myState[0] = baseState;");
			output.WriteLine("myState[1] = {0}ID;", _modelClass.PrivateName);
			output.WriteLine("return myState;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();
			output.WriteLine("#endregion");
			output.WriteLine();

			//
			// Class End
			//
			output.Indent--;
			output.WriteLine("}");
			
			//
			// Namespace End
			//
			output.Indent--;
			output.WriteLine("}");

			return output.ToString();
		}
	}
}
