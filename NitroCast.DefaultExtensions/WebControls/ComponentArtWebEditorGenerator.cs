using System;
using NitroCast.Core;
using NitroCast.Core.Extensions;

namespace NitroCast.Extensions.Default
{
	/// <summary>
	/// Summary description for WebEditorGenerator.
	/// </summary>
	[ExtensionAttribute("Component Art Web Editor Class",
		 "Roy A.E. Hodges",
		 "Copyright © 2003 Roy A.E. Hodges. All Rights Reserved.",
		 "{0}Editor.cs",
		 "Default class generator for the object being designed. The default manager class is required in the assembly. " + 
		 "It is recommended to include the default collection class as well.",
		 "\\Default\\Object Class", true)]
	public class ComponentArtWebEditorGenerator : OutputExtension
	{
        public ComponentArtWebEditorGenerator()
		{
            IsWebControl = true;
            ValueFieldExtensionType = typeof(WebEditorValueFieldExtension);
            ReferenceFieldExtensionType = typeof(ComponentArtReferenceFieldExtension);
            EnumFieldExtensionType = typeof(ComponentArtEnumFieldExtension);
            ExtensionType = OutputExtensionType.ModelClass;
		}

		public override string Render()
		{
			CodeWriter output = new CodeWriter();
            
            output.WriteLine("/* ********************************************************** *");
            output.WriteLine(" * AMNS NitroCast v1.0 Class ComponentArt Based Editor          *");
            output.WriteLine(" * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *");
            output.WriteLine(" * All Rights Reserved                                        *");
            output.WriteLine(" * ---------------------------------------------------------- *");
            output.WriteLine(" * Source code may not be reproduced or redistributed without *");
            output.WriteLine(" * written expressed permission from the author.              *");
            output.WriteLine(" * Permission is granted to modify source code by licencee.   *");
            output.WriteLine(" * These permissions do not extend to third parties.          *");
            output.WriteLine(" * ********************************************************** */");
            output.WriteLine();

			output.WriteLine("using System;");
			output.WriteLine("using System.Data;");
			output.WriteLine("using System.Web.UI;");
			output.WriteLine("using System.ComponentModel;");
            output.WriteLine("using ComponentArt.Web.UI;");
			
			//
			// Add imported namespaces
			//
			int importCount = -1;
			bool addImport = true;
			string[] namespacelist = new string[_modelClass.ReferenceFields.Count + _modelClass.ValueFields.Count];
			foreach(ValueField f in _modelClass.ValueFields)
			{
				addImport = true;
				foreach(string name in namespacelist)
					if(f.ValueType.TypeEditorNamespace == name |
						f.ValueType.TypeEditorNamespace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = f.ValueType.TypeEditorNamespace;
				}
			}

			foreach(ReferenceField c in _modelClass.ReferenceFields)
			{
				addImport = true;

				foreach(string name in namespacelist)
					if(c.ReferenceType.NameSpace == name | c.ReferenceType.NameSpace == _modelClass.Namespace)
					{
						addImport = false;
						break;
					}

				if(addImport)
				{
					importCount++;
					namespacelist[importCount] = c.ReferenceType.NameSpace;										
				}
			}
            			
			for(int x = 0; x <= importCount; x++)
				output.WriteLine("using {0};", namespacelist[x]);
			
			output.WriteLine();
			output.WriteLine("namespace {0}.Web.UI.WebControls", _modelClass.Namespace);
			output.WriteLine("{");

			output.Indent++;
			output.WriteLine("/// <summary>");
			output.WriteLine("/// Default web editor for {0}.", _modelClass.Name);
			output.WriteLine("/// </summary>");
			output.Write("[ToolboxData(\"<{0}:");
			output.Write(_modelClass.Name);
			output.Write("Editor runat=server></{0}:");
			output.Write(_modelClass.Name);
			output.WriteLine("Editor>\")]");
            output.WriteLine("public class {0}Editor : System.Web.UI.Control, INamingContainer", _modelClass.Name);
			output.WriteLine("{");
			
			output.Indent++;
			output.WriteLine("private int {0}ID;", _modelClass.PrivateName);
			if(!_modelClass.IsTableCoded)
				output.WriteLine("private string {0}Table = \"{1}\";", _modelClass.PrivateName, _modelClass.DefaultTableName);
			output.WriteLine("private {0} obj;", _modelClass.Name);
			output.WriteLine("private bool loadFlag = false;");
			output.WriteLine("private bool resetOnAdd;");		// Resets form on add.
			output.WriteLine("private bool editOnAdd;");		// Changes form to edit when adding new object.
            output.WriteLine("private string cssClass;");
			output.WriteLine();

            output.WriteLine("protected ComponentArt.Web.UI.TabStrip tabstrip;");
            output.WriteLine("protected ComponentArt.Web.UI.MultiPage multipage;");
            output.WriteLine("protected Literal headerText;");
            output.WriteLine();

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (!folder.IsBrowsable)
                    continue;

                output.WriteLine("#region Private Control Fields for {0} Folder", folder.CodeName);
                output.WriteLine();

                folder.Builder.CreateControlFields(output, folder, false);

                output.WriteLine();
                output.WriteLine("#endregion");
                output.WriteLine();
            }

			output.WriteLine("private Button btOk;");
			output.WriteLine("private Button btCancel;");
			output.WriteLine("private Button btDelete;");
			output.WriteLine();

			#region Public Properties

			output.WriteLine("#region Public Control Properties");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Data\"), DefaultValue(0)]");
			output.WriteLine("public int {0}ID", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return {0}ID;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("loadFlag = true;");
			output.WriteLine("{0}ID = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Behavior\"), DefaultValue(false)]");
			output.WriteLine("public bool ResetOnAdd", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return resetOnAdd;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("resetOnAdd = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("[Bindable(true), Category(\"Behavior\"), DefaultValue(false)]");
			output.WriteLine("public bool EditOnAdd", _modelClass.Name);
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("get");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("return editOnAdd;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine("set");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("editOnAdd = value;", _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

            output.WriteLine("[Bindable(true), Category(\"Appearance\"), DefaultValue(\"\")]");
            output.WriteLine("public string CssClass", _modelClass.Name);
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("get");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("return cssClass;", _modelClass.PrivateName);
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("set");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("cssClass = value;", _modelClass.PrivateName);
            output.Indent--;
            output.WriteLine("}");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

			if(!_modelClass.IsTableCoded)
			{
				output.WriteLine("[Bindable(true), Category(\"Data\"), DefaultValue(\"{0}\")]", _modelClass.DefaultTableName);
				output.WriteLine("public string {0}Table", _modelClass.Name);
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("get");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("return {0}Table;", _modelClass.PrivateName);
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine("set");
				output.WriteLine("{");
				output.Indent++;
				output.WriteLine("{0}Table = value;", _modelClass.PrivateName);
				output.Indent--;
				output.WriteLine("}");
				output.Indent--;
				output.WriteLine("}");
				output.WriteLine();
			}

			output.WriteLine("#endregion");
			output.WriteLine();

			#endregion

			#region Create Child Controls

			output.WriteLine("protected override void CreateChildControls()");
			output.WriteLine("{");
				
			output.Indent++;

            output.WriteLine("Panel container = new Panel();");
            output.WriteLine("container.CssClass = this.CssClass;");
            output.WriteLine("Controls.Add(container);");

            output.WriteLine("Panel header = new Panel();");
            output.WriteLine("header.CssClass = \"pHead\";");
            output.WriteLine("container.Controls.Add(header);");

            output.WriteLine("headerText = new Literal();");
            output.WriteLine("header.Controls.Add(headerText);");

            output.WriteLine("Panel content = new Panel();");
            output.WriteLine("content.CssClass = \"pContent\";");
            output.WriteLine("container.Controls.Add(content);");

            output.WriteLine("#region Tab Strip");
            output.WriteLine();

            output.WriteLine("tabstrip = new ComponentArt.Web.UI.TabStrip();");
            output.WriteLine();           

            output.WriteLine("// Create the DefaultTabLook instance and add it to the ItemLooks collection");
            output.WriteLine("ComponentArt.Web.UI.ItemLook defaultTabLook = new ComponentArt.Web.UI.ItemLook();");
            output.WriteLine("defaultTabLook.LookId = \"DefaultTabLook\";");
            output.WriteLine("defaultTabLook.CssClass = \"DefaultTab\";");
            output.WriteLine("defaultTabLook.HoverCssClass = \"DefaultTabHover\";");
            output.WriteLine("defaultTabLook.LabelPaddingLeft = Unit.Parse(\"10\");");
            output.WriteLine("defaultTabLook.LabelPaddingRight = Unit.Parse(\"10\");");
            output.WriteLine("defaultTabLook.LabelPaddingTop = Unit.Parse(\"5\");");
            output.WriteLine("defaultTabLook.LabelPaddingBottom = Unit.Parse(\"4\");");
            output.WriteLine("defaultTabLook.LeftIconUrl = \"tab_left_icon.gif\";");
            output.WriteLine("defaultTabLook.RightIconUrl = \"tab_right_icon.gif\";");
            output.WriteLine("defaultTabLook.HoverLeftIconUrl = \"hover_tab_left_icon.gif\";");
            output.WriteLine("defaultTabLook.HoverRightIconUrl = \"hover_tab_right_icon.gif\";");
            output.WriteLine("defaultTabLook.LeftIconWidth = Unit.Parse(\"3\");");
            output.WriteLine("defaultTabLook.LeftIconHeight = Unit.Parse(\"21\");");
            output.WriteLine("defaultTabLook.RightIconWidth = Unit.Parse(\"3\");");
            output.WriteLine("defaultTabLook.RightIconHeight = Unit.Parse(\"21\");");
            output.WriteLine("tabstrip.ItemLooks.Add(defaultTabLook);");
            output.WriteLine();

            output.WriteLine("// Create the SelectedTabLook instance and add it to the ItemLooks collection"); 
            output.WriteLine("ComponentArt.Web.UI.ItemLook selectedTabLook = new ComponentArt.Web.UI.ItemLook();");
            output.WriteLine("selectedTabLook.LookId = \"SelectedTabLook\";");
            output.WriteLine("selectedTabLook.CssClass = \"SelectedTab\";");
            output.WriteLine("selectedTabLook.LabelPaddingLeft = Unit.Parse(\"10\");");
            output.WriteLine("selectedTabLook.LabelPaddingRight = Unit.Parse(\"10\");");
            output.WriteLine("selectedTabLook.LabelPaddingTop = Unit.Parse(\"5\");");
            output.WriteLine("selectedTabLook.LabelPaddingBottom = Unit.Parse(\"4\");");
            output.WriteLine("selectedTabLook.LeftIconUrl = \"selected_tab_left_icon.gif\";");
            output.WriteLine("selectedTabLook.RightIconUrl = \"selected_tab_right_icon.gif\";");
            output.WriteLine("selectedTabLook.LeftIconWidth = Unit.Parse(\"3\");");
            output.WriteLine("selectedTabLook.LeftIconHeight = Unit.Parse(\"21\");");
            output.WriteLine("selectedTabLook.RightIconWidth = Unit.Parse(\"3\");");
            output.WriteLine("selectedTabLook.RightIconHeight = Unit.Parse(\"21\");");
            output.WriteLine("tabstrip.ItemLooks.Add(selectedTabLook);");
            output.WriteLine();

            output.WriteLine("tabstrip.ID = this.ID + \"_TabStrip\";");
            output.WriteLine("tabstrip.CssClass = \"TopGroup\";");
            output.WriteLine("tabstrip.DefaultItemLookId = \"DefaultTabLook\";");
            output.WriteLine("tabstrip.DefaultSelectedItemLookId = \"SelectedTabLook\";");
            output.WriteLine("tabstrip.DefaultGroupTabSpacing = 1;");
            output.WriteLine("tabstrip.ImagesBaseUrl = \"tabstrip_images/\";");
            output.WriteLine("tabstrip.MultiPageId = this.ID + \"_MultiPage\";");
            output.WriteLine("// tabstrip.EnableViewState = false;  // ComponentArt ComboBox does not yet work with ViewState off!");
            output.WriteLine("content.Controls.Add(tabstrip);");
            output.WriteLine();
            
            output.WriteLine("#endregion");
            output.WriteLine();

            output.WriteLine("#region MultiPage");
            output.WriteLine();

            output.WriteLine("multipage = new ComponentArt.Web.UI.MultiPage();");
            output.WriteLine("multipage.ID = this.ID + \"_MultiPage\";");
            output.WriteLine("multipage.CssClass = \"MultiPage\";");
            output.WriteLine("// multipage.EnableViewState = false; // ComponentArt ComboBox does not yet work with ViewState off!");
            output.WriteLine("content.Controls.Add(multipage);");
            output.WriteLine();

            output.WriteLine("#endregion");
            output.WriteLine();

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                // Ignore Empty Folders
                if (folder.Items.Count == 0)
                    continue;

                if (!folder.IsBrowsable)
                    continue;

                // Isolate controls in regions for easier readability
                output.WriteLine("#region Child Controls for {0} Folder", folder.Name);
                output.WriteLine();

                output.WriteLine("ComponentArt.Web.UI.PageView {0}View = new ComponentArt.Web.UI.PageView();",
                    folder.ProgramName);
                output.WriteLine("{0}View.CssClass = \"PageContent\";",
                    folder.ProgramName);
                output.WriteLine("multipage.PageViews.Add({0}View);",
                    folder.ProgramName);
                output.WriteLine();

                output.WriteLine("TabStripTab {0}Tab = new TabStripTab();",
                    folder.ProgramName);
                output.WriteLine("{0}Tab.Text = \"{1}\";",
                    folder.ProgramName, folder.Name);
                output.WriteLine("{0}Tab.PageViewId = {0}View.ID;",
                    folder.ProgramName);
                output.WriteLine("tabstrip.Tabs.Add({0}Tab);",
                    folder.ProgramName);
                output.WriteLine();


                folder.Builder.CreateControlProperties(output, folder, true, false,
                string.Format("registerControl({0}View, \"{{1}}\", {{0}});", folder.ProgramName));

                output.WriteLine("#endregion");
                output.WriteLine();
            }

            output.WriteLine("Panel buttons = new Panel();");
            output.WriteLine("buttons.CssClass = \"pButtons\";");
            output.WriteLine("content.Controls.Add(buttons);");
            output.WriteLine();

            output.WriteLine("btOk = new Button();");
			output.WriteLine("btOk.Text = \"OK\";");
			output.WriteLine("btOk.Width = Unit.Pixel(72);");
			output.WriteLine("btOk.EnableViewState = false;");
			output.WriteLine("btOk.Click += new EventHandler(ok_Click);");
            output.WriteLine("buttons.Controls.Add(btOk);");
			output.WriteLine();

            output.WriteLine("btCancel = new Button();");
			output.WriteLine("btCancel.Text = \"Cancel\";");
			output.WriteLine("btCancel.Width = Unit.Pixel(72);");
			output.WriteLine("btCancel.EnableViewState = false;");
            output.WriteLine("btCancel.CausesValidation = false;");
			output.WriteLine("btCancel.Click += new EventHandler(cancel_Click);");
            output.WriteLine("buttons.Controls.Add(btCancel);");
			output.WriteLine();

            output.WriteLine("btDelete = new Button();");
			output.WriteLine("btDelete.Text = \"Delete\";");
			output.WriteLine("btDelete.Width = Unit.Pixel(72);");
			output.WriteLine("btDelete.EnableViewState = false;");
			output.WriteLine("btDelete.Click += new EventHandler(delete_Click);");
            output.WriteLine("buttons.Controls.Add(btDelete);");
			output.WriteLine();
                                  
            output.WriteLine("\tbind();");

			output.WriteLine("ChildControlsCreated = true;");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			#endregion

            #region Register Control

            output.WriteLine("private void registerControl(ComponentArt.Web.UI.PageView pageView,");
            output.WriteLine("string caption,");
            output.WriteLine("params Control[] controls)");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("ControlCollection pageViewControls = pageView.Controls;");
            output.WriteLine("pageViewControls.Add(new LiteralControl(\"<div class=\\\"inputrow\\\">\"));");
            output.WriteLine("pageViewControls.Add(new LiteralControl(\"<span class=\\\"inputlabel\\\">\"));");
            output.WriteLine("pageViewControls.Add(new LiteralControl(caption));");
            output.WriteLine("pageViewControls.Add(new LiteralControl(\"</span><span class=\\\"inputfield\\\">\"));");
            output.WriteLine("foreach(Control control in controls)");
            output.Indent++;
            output.WriteLine("pageViewControls.Add(control);");
            output.Indent--;
            output.WriteLine("pageViewControls.Add(new LiteralControl(\"</span></div>\"));");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region DataBind

            output.WriteLine("private void bind()");
			output.WriteLine("{");
			output.Indent++;

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                folder.Builder.CreateControlBinding(output, folder);
            }

			output.Indent--;
			output.WriteLine("}");
            output.WriteLine();

			#endregion

			#region Events

			output.WriteLine("#region Events");
			output.WriteLine();

			output.WriteLine("protected void ok_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			
			output.Indent++;
            output.WriteLine("if({0}ID == 0)", _modelClass.PrivateName);
			output.Indent++;
			if(!_modelClass.IsTableCoded)
				output.WriteLine("obj = new {0}({1}Table);", _modelClass.Name, _modelClass.PrivateName);
			else
				output.WriteLine("obj = new {0}();", _modelClass.Name);
			output.Indent--;
			output.WriteLine("else");
			output.Indent++;
			if(!_modelClass.IsTableCoded)
				output.WriteLine("obj = new {0}({1}Table, {1}ID);", _modelClass.Name, _modelClass.PrivateName);
			else
                output.WriteLine("obj = new {0}({1}ID);", _modelClass.Name, _modelClass.PrivateName);
			output.Indent--;
			output.WriteLine();

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                folder.Builder.GetControlValues(output, "obj", folder);
            }

			output.WriteLine("if(editOnAdd)");
			output.Indent++;
			output.WriteLine("{0}ID = obj.Save();", _modelClass.PrivateName, _modelClass.Name);
			output.Indent--;
			output.WriteLine("else");
			output.Indent++;
			output.WriteLine("obj.Save();", _modelClass.PrivateName, _modelClass.Name);
			output.Indent--;
			output.WriteLine();

			//
			// Reset Objects Event
			//
			output.WriteLine("if(resetOnAdd)");
			output.WriteLine("{");
			output.Indent++;
            output.WriteLine("{0} newObj = new {0}();", _modelClass.Name);
            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (!folder.IsBrowsable)
                    continue;

                folder.Builder.SetControlValues(output, "newObj", folder);
            }
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("OnUpdated(EventArgs.Empty);");

			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected void cancel_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("this.OnCancelled(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected void delete_Click(object sender, EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("this.OnDeleteClicked(EventArgs.Empty);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler Cancelled;");
			output.WriteLine("protected virtual void OnCancelled(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(Cancelled != null)");
			output.Indent++;
			output.WriteLine("Cancelled(this, e);");
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler Updated;");
			output.WriteLine("protected virtual void OnUpdated(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(Updated != null)");
			output.Indent++;
			output.WriteLine("Updated(this, e);");
			output.Indent--;
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("public event EventHandler DeleteClicked;");
			output.WriteLine("protected virtual void OnDeleteClicked(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(DeleteClicked != null)");
			output.WriteLine("DeleteClicked(this, e);");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

            output.WriteLine("#endregion");
            output.WriteLine();

			#endregion

            #region OnLoad

            output.WriteLine("protected override void OnLoad(EventArgs e)");
            output.WriteLine("{");
            output.Indent++;
            output.WriteLine("base.OnLoad(e);");
            output.WriteLine("EnsureChildControls(); // Necissary to catch events!");
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine();

            #endregion

            #region OnPreRender

            output.WriteLine("protected override void OnPreRender(EventArgs e)");
			output.WriteLine("{");
			output.Indent++;
            output.WriteLine("base.OnPreRender(e);");
            output.WriteLine();
			output.WriteLine("if(loadFlag)", _modelClass.PrivateName);
			output.WriteLine("{");
            output.Indent++;
            output.WriteLine("if({0}ID > 0)", _modelClass.PrivateName);
            output.WriteLine("{");
			output.Indent++;
            if (!_modelClass.IsTableCoded)
            {
                output.WriteLine("obj = new {0}({1}Table, {1}ID);", _modelClass.Name, _modelClass.PrivateName);
            }
            else
            {
                output.WriteLine("obj = new {0}({1}ID);", _modelClass.Name, _modelClass.PrivateName);
            }
            output.WriteLine("headerText.Text = \"Edit {0} - \" + obj.ToString();", _modelClass.Caption, _modelClass.Name);
            output.Indent--;
            output.WriteLine("}");
            output.WriteLine("else if({0}ID <= 0)", _modelClass.PrivateName);
            output.WriteLine("{");
            output.Indent++;
            if (!_modelClass.IsTableCoded)
            {
                output.WriteLine("obj = new {0}({1}Table);", _modelClass.Name, _modelClass.PrivateName);
            }
            else
            {
                output.WriteLine("obj = new {0}();", _modelClass.Name);
            }
            output.WriteLine("headerText.Text = \"Add {0}\";", _modelClass.Caption);
            output.Indent--;
            output.WriteLine("}");

            foreach (ClassFolder folder in _modelClass.Folders)
            {
                if (!folder.IsBrowsable)
                    continue;

                if (folder.Items.Count > 0)
                {
                    output.WriteLine();
                    output.WriteLine("// Bind {0} Data", folder.Name);
                }

                folder.Builder.SetControlValues(output, "obj", folder);
            }

            output.WriteLine("tabstrip.SelectedTab = tabstrip.Tabs[0];");
            output.WriteLine("multipage.SelectedIndex = 0;");
            			
            output.Indent--;
            output.WriteLine("}");
            output.Indent--;
            output.WriteLine("}");
			output.WriteLine();

			#endregion

			#region ViewState

			output.WriteLine("protected override void LoadViewState(object savedState)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("if(savedState != null)");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object[] myState = (object[]) savedState;");
			output.WriteLine("if(myState[0] != null)");
			output.Indent++;
			output.WriteLine("base.LoadViewState(myState[0]);");
			output.Indent--;
			output.WriteLine("if(myState[1] != null)");
			output.Indent++;
			output.WriteLine("{0}ID = (int) myState[1];", _modelClass.PrivateName);
			output.Indent--;		
            output.Indent--;
			output.WriteLine("}");
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			output.WriteLine("protected override object SaveViewState()");
			output.WriteLine("{");
			output.Indent++;
			output.WriteLine("object baseState = base.SaveViewState();");
			output.WriteLine("object[] myState = new object[2];");
			output.WriteLine("myState[0] = baseState;");
			output.WriteLine("myState[1] = {0}ID;", _modelClass.PrivateName);
			output.WriteLine("return myState;");
			output.Indent--;
			output.WriteLine("}");

			#endregion
            
			if(CustomCode != null && CustomCode.Length > 0)
			{
				output.WriteLine("//--- Begin Custom Code ---");
				output.Write(CustomCode);
				output.WriteLine("//--- End Custom Code ---");
			}
			                        
			// End Class Declaration
			output.Indent--;
			output.WriteLine("}");

			// End Namespace Declaration
			output.Indent--;
			output.WriteLine("}");
			output.WriteLine();

			return output.ToString();
		}
	}
}